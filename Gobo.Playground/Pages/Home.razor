@page "/"
@using Gobo;
@using Gobo.Playground.Shared;
@inject IJSRuntime JSRuntime

<div class="d-flex">
    <div class="side-panel p-3 d-flex flex-column" data-bs-theme="dark">

        <h5 class="text-light">Gobo Playground</h5>

        <label for="printWidth" class="text-light pt-3">Print Width</label>
        <input type="number"
               class="form-control form-control-sm"
               id="printWidth"
               value="@_formatOptions.Width" @oninput="@OnWidthChanged" />

        <div class="form-check pt-2">
            <input type="checkbox"
                   class="form-check-input"
                   id="useTabs"
                   checked="@_formatOptions.UseTabs"
                   value="@_formatOptions.UseTabs" @oninput="@OnUseTabsChange" />
            <label for="useTabs" class="text-light form-check-label">Use Tabs</label>
        </div>

        @if (!_formatOptions.UseTabs)
        {
            <div class="pb-2 pt-1">
                <label for="tabWidth" class="text-light">Tab Width</label>
                <input type="number"
                       class="form-control form-control-sm"
                       value="@_formatOptions.TabWidth" @oninput="@OnTabWidthChange" />
            </div>
        }

        <div class="form-check">
            <input type="checkbox"
                   class="form-check-input"
                   id="formatComments"
                   checked="@_formatOptions.FormatComments"
                   value="@_formatOptions.FormatComments" @oninput="@OnFormatCommentsChange" />
            <label for="formatComments" class="text-light form-check-label">Format Comments</label>
        </div>

        <div class="form-check">
            <input type="checkbox"
                   class="form-check-input"
                   id="showAst"
                   value="@_showAst" @oninput="@OnShowAstChanged" />
            <label for="showAst" class="text-light form-check-label">Show AST</label>
        </div>

        <a class="btn btn-outline-light mt-auto" href="https://github.com/Pizzaandy/Gobo" target="_blank">
            <i class="bi-github"></i> GitHub
        </a>
    </div>

    <div id="panels" class="flex-grow-1 vh-100">
        <div class="row h-100 g-0">
            <div class="col-xl">
                <AceEditor @ref="inputEditor"
                           Value="@_input"
                           ValueChanged="@OnInputChanged"
                           Language="game_maker_language"></AceEditor>
            </div>
            @if (_showAst)
            {
                <div class="col-xl">
                    <AceEditor @ref="astEditor"
                               Language="json"
                               TabSize="2"
                               IsReadonly="true"></AceEditor>
                </div>
            }
            <div class="col-xl">
                <AceEditor @ref="outputEditor"
                           Language="game_maker_language"
                           IsReadonly="true"></AceEditor>
            </div>
        </div>
    </div>
</div>

@functions
{
    string _input = string.Empty;
    FormatOptions _formatOptions = new() { GetDebugInfo = true, ValidateOutput = true };

    AceEditor inputEditor = null!;
    AceEditor astEditor = null!;
    AceEditor outputEditor = null!;

    bool _showAst = false;
    bool _error;

    const string _initialText = @"//format this please!
x = a and b or c  a=0xFG=1 var var var i := 0
do begin
;;;;show_debug_message(i)
;;;;++constructor
end until not constructor < 10 return

call()";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await inputEditor.SetText(_initialText);
            await inputEditor.SetWidth(_formatOptions.Width);
            await outputEditor.SetWidth(_formatOptions.Width);
            await Format();
        }
    }

    async Task OnInputChanged(string input)
    {
        _input = input;
        await Format();
    }

    async Task Format()
    {
        if (string.IsNullOrEmpty(_input))
        {
            return;
        }

        FormatResult result;
        _error = false;

        if (_input.Length > 1_000_000)
        {
            _error = true;
            await outputEditor.SetLanguage("text");
            await outputEditor.SetText("⚠️ Code length cannot exceed 1,000,000 characters.");
            return;
        }

        try
        {
            result = await Task.Run(() => GmlFormatter.Format(_input, _formatOptions));
        }
        catch (Exception e)
        {
            _error = true;
            await outputEditor.SetLanguage("text");
            await outputEditor.SetText("❌ " + e.Message);
            return;
        }

        await outputEditor.SetLanguage("game_maker_language");
        await outputEditor.SetText(result.Output);

        if (_showAst)
        {
            await astEditor.SetText(result.Ast);
        }
    }

    async Task OnWidthChanged(ChangeEventArgs args)
    {
        if (!int.TryParse(args?.Value?.ToString(), out var number))
        {
            return;
        }
        _formatOptions.Width = Math.Max(number, 0);

        await inputEditor.SetWidth(_formatOptions.Width);
        await outputEditor.SetWidth(_formatOptions.Width);

        await Format();
    }

    async Task OnTabWidthChange(ChangeEventArgs args)
    {
        if (!int.TryParse(args?.Value?.ToString(), out var number))
        {
            return;
        }
        _formatOptions.TabWidth = Math.Max(number, 0);
        await Format();
    }

    async Task OnUseTabsChange(ChangeEventArgs args)
    {
        _formatOptions.UseTabs = (bool)args.Value;
        await Format();
    }

    async Task OnFormatCommentsChange(ChangeEventArgs args)
    {
        _formatOptions.FormatComments = (bool)args.Value;
        await Format();
    }

    async Task OnShowAstChanged(ChangeEventArgs args)
    {
        _showAst = (bool)args.Value;
        await Format();
    }
}
