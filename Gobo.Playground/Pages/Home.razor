@page "/"
@using Gobo;
@using Gobo.Playground.Shared;
@inject IJSRuntime JSRuntime

<div class="d-flex">
    <div class="side-panel p-3" data-bs-theme="dark">
        <h5 class="text-light">Gobo Playground</h5>
        <label for="printWidth" class="text-light">Print width</label>
        <input type="text"
               class="form-control"
               id="printWidth"
               value="@_formatOptions.Width" @oninput="@OnWidthChanged" />
    </div>

    <div id="panels" class="flex-grow-1 vh-100">
        <div class="row h-100 g-0">
            <div class="col-lg">
                <AceEditor @ref="inputEditor"
                           Value="@_input"
                           ValueChanged="@OnInputChanged"
                           Language="game_maker_language"></AceEditor>
            </div>
            <div class="col-lg">
                <AceEditor @ref="outputEditor"
                           Language="game_maker_language"
                           IsReadonly="true"></AceEditor>
            </div>
        </div>
    </div>
</div>

@functions
{
    string _input = string.Empty;
    FormatOptions _formatOptions = new();

    AceEditor inputEditor = null!;
    AceEditor outputEditor = null!;

    bool _error;

    const string _initialText = @"x = a and b or c  a=0xFG=1 var var var i := 0
do begin
;;;;show_debug_message(i)
;;;;++constructor
end until not constructor < 10 return

call()";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await inputEditor.SetText(_initialText);
            await Format();
        }
    }

    async Task OnInputChanged(string input)
    {
        _input = input;
        await Format();
    }

    async Task Format()
    {
        if (string.IsNullOrEmpty(_input))
        {
            return;
        }

        FormatResult result;
        _error = false;

        if (_input.Length > 10_000)
        {
            _error = true;
            await outputEditor.SetLanguage("json");
            await outputEditor.SetText("Code length cannot exceed 10,000 characters.");
            return;
        }

        try
        {
            result = await Task.Run(() => GmlFormatter.Format(_input, _formatOptions));
        }
        catch (Exception e)
        {
            _error = true;
            await outputEditor.SetLanguage("json");
            await outputEditor.SetText(e.Message);
            return;
        }

        await outputEditor.SetLanguage("game_maker_language");
        await outputEditor.SetText(result.Output);
    }

    async Task OnWidthChanged(ChangeEventArgs args)
    {
        var value = args?.Value?.ToString();

        if (!int.TryParse(value, out var number))
        {
            return;
        }

        _formatOptions.Width = Math.Max(number, 0);

        await outputEditor.SetWidth(_formatOptions.Width);

        await Format();
    }
}
