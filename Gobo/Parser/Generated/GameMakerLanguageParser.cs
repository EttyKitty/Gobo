//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GameMakerLanguageParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GameMakerLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, OpenBracket=3, ListAccessor=4, 
		MapAccessor=5, GridAccessor=6, ArrayAccessor=7, StructAccessor=8, CloseBracket=9, 
		OpenParen=10, CloseParen=11, OpenBrace=12, TemplateStringEndExpression=13, 
		CloseBrace=14, Begin=15, End=16, SemiColon=17, Comma=18, Assign=19, Colon=20, 
		Dot=21, PlusPlus=22, MinusMinus=23, Plus=24, Minus=25, BitNot=26, Not=27, 
		Multiply=28, Divide=29, IntegerDivide=30, Modulo=31, Power=32, QuestionMark=33, 
		NullCoalesce=34, NullCoalescingAssign=35, RightShiftArithmetic=36, LeftShiftArithmetic=37, 
		LessThan=38, MoreThan=39, LessThanEquals=40, GreaterThanEquals=41, Equals_=42, 
		NotEquals=43, BitAnd=44, BitXOr=45, BitOr=46, And=47, Or=48, Xor=49, MultiplyAssign=50, 
		DivideAssign=51, PlusAssign=52, MinusAssign=53, ModulusAssign=54, LeftShiftArithmeticAssign=55, 
		RightShiftArithmeticAssign=56, BitAndAssign=57, BitXorAssign=58, BitOrAssign=59, 
		NumberSign=60, DollarSign=61, AtSign=62, BooleanLiteral=63, IntegerLiteral=64, 
		DecimalLiteral=65, BinaryLiteral=66, HexIntegerLiteral=67, Undefined=68, 
		NoOne=69, Break=70, Exit=71, Do=72, Case=73, Else=74, New=75, Var=76, 
		GlobalVar=77, Catch=78, Finally=79, Return=80, Continue=81, For=82, Switch=83, 
		While=84, Until=85, Repeat=86, Function=87, With=88, Default=89, If=90, 
		Then=91, Throw=92, Delete=93, Try=94, Enum=95, Constructor=96, Static=97, 
		Macro=98, EscapedNewLine=99, Define=100, Region=101, EndRegion=102, Identifier=103, 
		StringLiteral=104, TemplateStringStart=105, VerbatimStringLiteral=106, 
		WhiteSpaces=107, LineTerminator=108, UnexpectedCharacter=109, RegionCharacters=110, 
		RegionEOL=111, TemplateStringEnd=112, TemplateStringStartExpression=113, 
		TemplateStringText=114;
	public const int
		RULE_program = 0, RULE_statementList = 1, RULE_statementNoSemicolon = 2, 
		RULE_statement = 3, RULE_block = 4, RULE_ifStatement = 5, RULE_iterationStatement = 6, 
		RULE_withStatement = 7, RULE_switchStatement = 8, RULE_continueStatement = 9, 
		RULE_breakStatement = 10, RULE_exitStatement = 11, RULE_emptyStatement = 12, 
		RULE_caseBlock = 13, RULE_caseClause = 14, RULE_throwStatement = 15, RULE_tryStatement = 16, 
		RULE_catchProduction = 17, RULE_finallyProduction = 18, RULE_returnStatement = 19, 
		RULE_deleteStatement = 20, RULE_assignment = 21, RULE_varModifier = 22, 
		RULE_variableDeclaration = 23, RULE_expression = 24, RULE_conditionalExpression = 25, 
		RULE_bitXorExpression = 26, RULE_bitOrExpression = 27, RULE_bitAndExpression = 28, 
		RULE_nullCoalescingExpression = 29, RULE_xorExpression = 30, RULE_andExpression = 31, 
		RULE_orExpression = 32, RULE_equalityExpression = 33, RULE_relationalExpression = 34, 
		RULE_shiftExpression = 35, RULE_additiveExpression = 36, RULE_multiplicativeExpression = 37, 
		RULE_unaryExpression = 38, RULE_primaryExpression = 39, RULE_primaryExpressionStart = 40, 
		RULE_memberIndex = 41, RULE_memberDot = 42, RULE_methodInvocation = 43, 
		RULE_accessor = 44, RULE_arguments = 45, RULE_argumentList = 46, RULE_assignmentOperator = 47, 
		RULE_literal = 48, RULE_templateStringLiteral = 49, RULE_templateStringAtom = 50, 
		RULE_arrayLiteral = 51, RULE_structLiteral = 52, RULE_propertyAssignment = 53, 
		RULE_propertyIdentifier = 54, RULE_functionDeclaration = 55, RULE_constructorClause = 56, 
		RULE_parameterList = 57, RULE_parameter = 58, RULE_identifier = 59, RULE_enumeratorDeclaration = 60, 
		RULE_enumeratorBlock = 61, RULE_enumerator = 62, RULE_macroStatement = 63, 
		RULE_defineStatement = 64, RULE_regionStatement = 65, RULE_identifierStatement = 66, 
		RULE_softKeyword = 67, RULE_propertySoftKeyword = 68, RULE_openBlock = 69, 
		RULE_closeBlock = 70, RULE_eos = 71, RULE_macroToken = 72;
	public static readonly string[] ruleNames = {
		"program", "statementList", "statementNoSemicolon", "statement", "block", 
		"ifStatement", "iterationStatement", "withStatement", "switchStatement", 
		"continueStatement", "breakStatement", "exitStatement", "emptyStatement", 
		"caseBlock", "caseClause", "throwStatement", "tryStatement", "catchProduction", 
		"finallyProduction", "returnStatement", "deleteStatement", "assignment", 
		"varModifier", "variableDeclaration", "expression", "conditionalExpression", 
		"bitXorExpression", "bitOrExpression", "bitAndExpression", "nullCoalescingExpression", 
		"xorExpression", "andExpression", "orExpression", "equalityExpression", 
		"relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "primaryExpression", "primaryExpressionStart", "memberIndex", 
		"memberDot", "methodInvocation", "accessor", "arguments", "argumentList", 
		"assignmentOperator", "literal", "templateStringLiteral", "templateStringAtom", 
		"arrayLiteral", "structLiteral", "propertyAssignment", "propertyIdentifier", 
		"functionDeclaration", "constructorClause", "parameterList", "parameter", 
		"identifier", "enumeratorDeclaration", "enumeratorBlock", "enumerator", 
		"macroStatement", "defineStatement", "regionStatement", "identifierStatement", 
		"softKeyword", "propertySoftKeyword", "openBlock", "closeBlock", "eos", 
		"macroToken"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'['", "'[|'", "'[?'", "'[#'", "'[@'", "'[$'", "']'", 
		"'('", "')'", null, null, "'}'", "'begin'", "'end'", "';'", "','", null, 
		"':'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", null, "'*'", "'/'", 
		"'div'", null, "'**'", "'?'", "'??'", "'??='", "'>>'", "'<<'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", null, "'&'", "'^'", "'|'", null, null, 
		null, "'*='", "'/='", "'+='", "'-='", "'%='", "'<<='", "'>>='", "'&='", 
		"'^='", "'|='", "'#'", "'$'", "'@'", null, null, null, null, null, "'undefined'", 
		"'noone'", "'break'", "'exit'", "'do'", "'case'", "'else'", "'new'", "'var'", 
		"'globalvar'", "'catch'", "'finally'", "'return'", "'continue'", "'for'", 
		"'switch'", "'while'", "'until'", "'repeat'", "'function'", "'with'", 
		"'default'", "'if'", "'then'", "'throw'", "'delete'", "'try'", "'enum'", 
		"'constructor'", "'static'", "'#macro'", "'\\'", "'#define'", "'#region'", 
		"'#endregion'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "OpenBracket", "ListAccessor", 
		"MapAccessor", "GridAccessor", "ArrayAccessor", "StructAccessor", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "TemplateStringEndExpression", 
		"CloseBrace", "Begin", "End", "SemiColon", "Comma", "Assign", "Colon", 
		"Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
		"Divide", "IntegerDivide", "Modulo", "Power", "QuestionMark", "NullCoalesce", 
		"NullCoalescingAssign", "RightShiftArithmetic", "LeftShiftArithmetic", 
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", 
		"NotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "Xor", "MultiplyAssign", 
		"DivideAssign", "PlusAssign", "MinusAssign", "ModulusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"NumberSign", "DollarSign", "AtSign", "BooleanLiteral", "IntegerLiteral", 
		"DecimalLiteral", "BinaryLiteral", "HexIntegerLiteral", "Undefined", "NoOne", 
		"Break", "Exit", "Do", "Case", "Else", "New", "Var", "GlobalVar", "Catch", 
		"Finally", "Return", "Continue", "For", "Switch", "While", "Until", "Repeat", 
		"Function", "With", "Default", "If", "Then", "Throw", "Delete", "Try", 
		"Enum", "Constructor", "Static", "Macro", "EscapedNewLine", "Define", 
		"Region", "EndRegion", "Identifier", "StringLiteral", "TemplateStringStart", 
		"VerbatimStringLiteral", "WhiteSpaces", "LineTerminator", "UnexpectedCharacter", 
		"RegionCharacters", "RegionEOL", "TemplateStringEnd", "TemplateStringStartExpression", 
		"TemplateStringText"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GameMakerLanguageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GameMakerLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GameMakerLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GameMakerLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GameMakerLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590365688L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8761563363839L) != 0)) {
				{
				State = 146;
				statementList();
				}
			}

			State = 149;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 153;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpenBracket:
				case OpenParen:
				case OpenBrace:
				case Begin:
				case PlusPlus:
				case MinusMinus:
				case Plus:
				case Minus:
				case BitNot:
				case Not:
				case BooleanLiteral:
				case IntegerLiteral:
				case DecimalLiteral:
				case BinaryLiteral:
				case HexIntegerLiteral:
				case Undefined:
				case NoOne:
				case Break:
				case Exit:
				case Do:
				case New:
				case Var:
				case GlobalVar:
				case Return:
				case Continue:
				case For:
				case Switch:
				case While:
				case Repeat:
				case Function:
				case With:
				case If:
				case Throw:
				case Delete:
				case Try:
				case Enum:
				case Constructor:
				case Static:
				case Macro:
				case Define:
				case Region:
				case EndRegion:
				case Identifier:
				case StringLiteral:
				case TemplateStringStart:
				case VerbatimStringLiteral:
					{
					State = 151;
					statement();
					}
					break;
				case SemiColon:
					{
					State = 152;
					emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590365688L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8761563363839L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementNoSemicolonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineStatementContext defineStatement() {
			return GetRuleContext<DefineStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegionStatementContext regionStatement() {
			return GetRuleContext<RegionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorDeclarationContext enumeratorDeclaration() {
			return GetRuleContext<EnumeratorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public StatementNoSemicolonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementNoSemicolon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementNoSemicolon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementNoSemicolonContext statementNoSemicolon() {
		StatementNoSemicolonContext _localctx = new StatementNoSemicolonContext(Context, State);
		EnterRule(_localctx, 4, RULE_statementNoSemicolon);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159;
				unaryExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160;
				ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 161;
				iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 162;
				continueStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 163;
				breakStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 164;
				returnStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 165;
				withStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 166;
				switchStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 167;
				tryStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 168;
				throwStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 169;
				exitStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 170;
				macroStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 171;
				defineStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 172;
				regionStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 173;
				enumeratorDeclaration();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 174;
				functionDeclaration();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 175;
				deleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoSemicolonContext statementNoSemicolon() {
			return GetRuleContext<StatementNoSemicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			statementNoSemicolon();
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 179;
					eos();
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenBlockContext openBlock() {
			return GetRuleContext<OpenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseBlockContext closeBlock() {
			return GetRuleContext<CloseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			openBlock();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590365688L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8761563363839L) != 0)) {
				{
				State = 186;
				statementList();
				}
			}

			State = 189;
			closeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(GameMakerLanguageParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(GameMakerLanguageParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(GameMakerLanguageParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(If);
			State = 192;
			expression();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Then) {
				{
				State = 193;
				Match(Then);
				}
			}

			State = 196;
			statement();
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 197;
				Match(Else);
				State = 198;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(GameMakerLanguageParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(GameMakerLanguageParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(GameMakerLanguageParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(GameMakerLanguageParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(GameMakerLanguageParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(GameMakerLanguageParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementNoSemicolonContext statementNoSemicolon() {
			return GetRuleContext<StatementNoSemicolonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(GameMakerLanguageParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public RepeatStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_iterationStatement);
		int _la;
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Do:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				Match(Do);
				State = 202;
				statement();
				State = 203;
				Match(Until);
				State = 204;
				expression();
				}
				break;
			case While:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				Match(While);
				State = 207;
				expression();
				State = 208;
				statement();
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 210;
				Match(For);
				State = 211;
				Match(OpenParen);
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590496760L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8761563363839L) != 0)) {
					{
					State = 212;
					statementNoSemicolon();
					}
				}

				State = 215;
				Match(SemiColon);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590496760L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8250640566335L) != 0)) {
					{
					State = 216;
					expression();
					}
				}

				State = 219;
				Match(SemiColon);
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590496760L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8761563363839L) != 0)) {
					{
					State = 220;
					statement();
					}
				}

				State = 223;
				Match(CloseParen);
				State = 224;
				statement();
				}
				break;
			case Repeat:
				_localctx = new RepeatStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 225;
				Match(Repeat);
				State = 226;
				expression();
				State = 227;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(GameMakerLanguageParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(With);
			State = 232;
			expression();
			State = 233;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(GameMakerLanguageParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(Switch);
			State = 236;
			expression();
			State = 237;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(GameMakerLanguageParser.Continue, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(Continue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(GameMakerLanguageParser.Break, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(Break);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exit() { return GetToken(GameMakerLanguageParser.Exit, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(Exit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(GameMakerLanguageParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenBlockContext openBlock() {
			return GetRuleContext<OpenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseBlockContext closeBlock() {
			return GetRuleContext<CloseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			openBlock();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Case || _la==Default) {
				{
				{
				State = 248;
				caseClause();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 254;
			closeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(GameMakerLanguageParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(GameMakerLanguageParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_caseClause);
		int _la;
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Default:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				Match(Default);
				State = 257;
				Match(Colon);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590365688L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8761563363839L) != 0)) {
					{
					State = 258;
					statementList();
					}
				}

				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				Match(Case);
				State = 262;
				expression();
				State = 263;
				Match(Colon);
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590365688L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8761563363839L) != 0)) {
					{
					State = 264;
					statementList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(GameMakerLanguageParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(Throw);
			State = 270;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(GameMakerLanguageParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(Try);
			State = 273;
			statement();
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 274;
				catchProduction();
				State = 276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 275;
					finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 278;
				finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(GameMakerLanguageParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 34, RULE_catchProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(Catch);
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 282;
				Match(OpenParen);
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Constructor || _la==Identifier) {
					{
					State = 283;
					identifier();
					}
				}

				State = 286;
				Match(CloseParen);
				}
				break;
			}
			State = 289;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(GameMakerLanguageParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 36, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(Finally);
			State = 292;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(GameMakerLanguageParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(Return);
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 295;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(GameMakerLanguageParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(Delete);
			State = 299;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryAssignmentContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationListContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public VariableDeclarationListContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignment);
		int _la;
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case Begin:
			case BooleanLiteral:
			case IntegerLiteral:
			case DecimalLiteral:
			case BinaryLiteral:
			case HexIntegerLiteral:
			case Undefined:
			case NoOne:
			case New:
			case Constructor:
			case Identifier:
			case StringLiteral:
			case TemplateStringStart:
			case VerbatimStringLiteral:
				_localctx = new PrimaryAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 301;
				primaryExpression();
				State = 302;
				assignmentOperator();
				State = 303;
				expression();
				}
				break;
			case Var:
			case GlobalVar:
			case Static:
				_localctx = new VariableDeclarationListContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				varModifier();
				State = 306;
				variableDeclaration();
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 307;
					Match(Comma);
					State = 308;
					variableDeclaration();
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Var() { return GetTokens(GameMakerLanguageParser.Var); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var(int i) {
			return GetToken(GameMakerLanguageParser.Var, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(GameMakerLanguageParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalVar() { return GetToken(GameMakerLanguageParser.GlobalVar, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_varModifier);
		int _la;
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 316;
					Match(Var);
					}
					}
					State = 319;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Var );
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				Match(Static);
				}
				break;
			case GlobalVar:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322;
				Match(GlobalVar);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			identifier();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 326;
				Match(Assign);
				State = 327;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_expression);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case Begin:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
			case BooleanLiteral:
			case IntegerLiteral:
			case DecimalLiteral:
			case BinaryLiteral:
			case HexIntegerLiteral:
			case Undefined:
			case NoOne:
			case New:
			case Constructor:
			case Identifier:
			case StringLiteral:
			case TemplateStringStart:
			case VerbatimStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330;
				conditionalExpression();
				}
				break;
			case Function:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitXorExpressionContext bitXorExpression() {
			return GetRuleContext<BitXorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(GameMakerLanguageParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			bitXorExpression();
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 335;
				Match(QuestionMark);
				State = 336;
				expression();
				State = 337;
				Match(Colon);
				State = 338;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitXorExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitOrExpressionContext[] bitOrExpression() {
			return GetRuleContexts<BitOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitOrExpressionContext bitOrExpression(int i) {
			return GetRuleContext<BitOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BitXOr() { return GetTokens(GameMakerLanguageParser.BitXOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr(int i) {
			return GetToken(GameMakerLanguageParser.BitXOr, i);
		}
		public BitXorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitXorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitXorExpressionContext bitXorExpression() {
		BitXorExpressionContext _localctx = new BitXorExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_bitXorExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			bitOrExpression();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BitXOr) {
				{
				{
				State = 343;
				Match(BitXOr);
				State = 344;
				bitOrExpression();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitAndExpressionContext[] bitAndExpression() {
			return GetRuleContexts<BitAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitAndExpressionContext bitAndExpression(int i) {
			return GetRuleContext<BitAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BitOr() { return GetTokens(GameMakerLanguageParser.BitOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr(int i) {
			return GetToken(GameMakerLanguageParser.BitOr, i);
		}
		public BitOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitOrExpressionContext bitOrExpression() {
		BitOrExpressionContext _localctx = new BitOrExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_bitOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			bitAndExpression();
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BitOr) {
				{
				{
				State = 351;
				Match(BitOr);
				State = 352;
				bitAndExpression();
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullCoalescingExpressionContext[] nullCoalescingExpression() {
			return GetRuleContexts<NullCoalescingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullCoalescingExpressionContext nullCoalescingExpression(int i) {
			return GetRuleContext<NullCoalescingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BitAnd() { return GetTokens(GameMakerLanguageParser.BitAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd(int i) {
			return GetToken(GameMakerLanguageParser.BitAnd, i);
		}
		public BitAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitAndExpressionContext bitAndExpression() {
		BitAndExpressionContext _localctx = new BitAndExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_bitAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			nullCoalescingExpression();
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BitAnd) {
				{
				{
				State = 359;
				Match(BitAnd);
				State = 360;
				nullCoalescingExpression();
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullCoalescingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public XorExpressionContext[] xorExpression() {
			return GetRuleContexts<XorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public XorExpressionContext xorExpression(int i) {
			return GetRuleContext<XorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(GameMakerLanguageParser.NullCoalesce, 0); }
		public NullCoalescingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullCoalescingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalescingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullCoalescingExpressionContext nullCoalescingExpression() {
		NullCoalescingExpressionContext _localctx = new NullCoalescingExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_nullCoalescingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			xorExpression();
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NullCoalesce) {
				{
				State = 367;
				Match(NullCoalesce);
				State = 368;
				xorExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Xor() { return GetTokens(GameMakerLanguageParser.Xor); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xor(int i) {
			return GetToken(GameMakerLanguageParser.Xor, i);
		}
		public XorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExpressionContext xorExpression() {
		XorExpressionContext _localctx = new XorExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_xorExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			andExpression();
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Xor) {
				{
				{
				State = 372;
				Match(Xor);
				State = 373;
				andExpression();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext[] orExpression() {
			return GetRuleContexts<OrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression(int i) {
			return GetRuleContext<OrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(GameMakerLanguageParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(GameMakerLanguageParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			orExpression();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 380;
				Match(And);
				State = 381;
				orExpression();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(GameMakerLanguageParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(GameMakerLanguageParser.Or, i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			equalityExpression();
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 388;
				Match(Or);
				State = 389;
				equalityExpression();
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals_() { return GetTokens(GameMakerLanguageParser.Equals_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_(int i) {
			return GetToken(GameMakerLanguageParser.Equals_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Assign() { return GetTokens(GameMakerLanguageParser.Assign); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign(int i) {
			return GetToken(GameMakerLanguageParser.Assign, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEquals() { return GetTokens(GameMakerLanguageParser.NotEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals(int i) {
			return GetToken(GameMakerLanguageParser.NotEquals, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			relationalExpression();
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13194140057600L) != 0)) {
				{
				{
				State = 396;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 13194140057600L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 397;
				relationalExpression();
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThan() { return GetTokens(GameMakerLanguageParser.LessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan(int i) {
			return GetToken(GameMakerLanguageParser.LessThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MoreThan() { return GetTokens(GameMakerLanguageParser.MoreThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan(int i) {
			return GetToken(GameMakerLanguageParser.MoreThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThanEquals() { return GetTokens(GameMakerLanguageParser.LessThanEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals(int i) {
			return GetToken(GameMakerLanguageParser.LessThanEquals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterThanEquals() { return GetTokens(GameMakerLanguageParser.GreaterThanEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals(int i) {
			return GetToken(GameMakerLanguageParser.GreaterThanEquals, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			shiftExpression();
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) {
				{
				{
				State = 404;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 405;
				shiftExpression();
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftShiftArithmetic() { return GetTokens(GameMakerLanguageParser.LeftShiftArithmetic); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic(int i) {
			return GetToken(GameMakerLanguageParser.LeftShiftArithmetic, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightShiftArithmetic() { return GetTokens(GameMakerLanguageParser.RightShiftArithmetic); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic(int i) {
			return GetToken(GameMakerLanguageParser.RightShiftArithmetic, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_shiftExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			additiveExpression();
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RightShiftArithmetic || _la==LeftShiftArithmetic) {
				{
				{
				State = 412;
				_la = TokenStream.LA(1);
				if ( !(_la==RightShiftArithmetic || _la==LeftShiftArithmetic) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 413;
				additiveExpression();
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(GameMakerLanguageParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(GameMakerLanguageParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(GameMakerLanguageParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(GameMakerLanguageParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_additiveExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			multiplicativeExpression();
			State = 424;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 420;
					_la = TokenStream.LA(1);
					if ( !(_la==Plus || _la==Minus) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 421;
					multiplicativeExpression();
					}
					} 
				}
				State = 426;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Multiply() { return GetTokens(GameMakerLanguageParser.Multiply); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply(int i) {
			return GetToken(GameMakerLanguageParser.Multiply, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Divide() { return GetTokens(GameMakerLanguageParser.Divide); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide(int i) {
			return GetToken(GameMakerLanguageParser.Divide, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Modulo() { return GetTokens(GameMakerLanguageParser.Modulo); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo(int i) {
			return GetToken(GameMakerLanguageParser.Modulo, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IntegerDivide() { return GetTokens(GameMakerLanguageParser.IntegerDivide); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide(int i) {
			return GetToken(GameMakerLanguageParser.IntegerDivide, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			unaryExpression();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4026531840L) != 0)) {
				{
				{
				State = 428;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4026531840L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 429;
				unaryExpression();
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(GameMakerLanguageParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(GameMakerLanguageParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(GameMakerLanguageParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(GameMakerLanguageParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(GameMakerLanguageParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(GameMakerLanguageParser.MinusMinus, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_unaryExpression);
		int _la;
		try {
			State = 438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case Begin:
			case BooleanLiteral:
			case IntegerLiteral:
			case DecimalLiteral:
			case BinaryLiteral:
			case HexIntegerLiteral:
			case Undefined:
			case NoOne:
			case New:
			case Constructor:
			case Identifier:
			case StringLiteral:
			case TemplateStringStart:
			case VerbatimStringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 435;
				primaryExpression();
				}
				break;
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case BitNot:
			case Not:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 264241152L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 437;
				primaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionStartContext primaryExpressionStart() {
			return GetRuleContext<PrimaryExpressionStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexContext[] memberIndex() {
			return GetRuleContexts<MemberIndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberIndexContext memberIndex(int i) {
			return GetRuleContext<MemberIndexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDotContext[] memberDot() {
			return GetRuleContexts<MemberDotContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDotContext memberDot(int i) {
			return GetRuleContext<MemberDotContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext[] methodInvocation() {
			return GetRuleContexts<MethodInvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodInvocationContext methodInvocation(int i) {
			return GetRuleContext<MethodInvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(GameMakerLanguageParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(GameMakerLanguageParser.MinusMinus, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_primaryExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			primaryExpressionStart();
			State = 446;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 444;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OpenBracket:
					case ListAccessor:
					case MapAccessor:
					case GridAccessor:
					case ArrayAccessor:
					case StructAccessor:
						{
						State = 441;
						memberIndex();
						}
						break;
					case Dot:
						{
						State = 442;
						memberDot();
						}
						break;
					case OpenParen:
						{
						State = 443;
						methodInvocation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 448;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 449;
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionStartContext : ParserRuleContext {
		public PrimaryExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpressionStart; } }
	 
		public PrimaryExpressionStartContext() { }
		public virtual void CopyFrom(PrimaryExpressionStartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : PrimaryExpressionStartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : PrimaryExpressionStartContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleNameExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : PrimaryExpressionStartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(GameMakerLanguageParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NewExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionStartContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionStartContext primaryExpressionStart() {
		PrimaryExpressionStartContext _localctx = new PrimaryExpressionStartContext(Context, State);
		EnterRule(_localctx, 80, RULE_primaryExpressionStart);
		int _la;
		try {
			State = 463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenBrace:
			case Begin:
			case BooleanLiteral:
			case IntegerLiteral:
			case DecimalLiteral:
			case BinaryLiteral:
			case HexIntegerLiteral:
			case Undefined:
			case NoOne:
			case StringLiteral:
			case TemplateStringStart:
			case VerbatimStringLiteral:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 452;
				literal();
				}
				break;
			case Constructor:
			case Identifier:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 453;
				identifier();
				}
				break;
			case OpenParen:
				_localctx = new ParenthesizedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 454;
				Match(OpenParen);
				State = 455;
				expression();
				State = 456;
				Match(CloseParen);
				}
				break;
			case New:
				_localctx = new NewExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 458;
				Match(New);
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Constructor || _la==Identifier) {
					{
					State = 459;
					identifier();
					}
				}

				State = 462;
				arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(GameMakerLanguageParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public MemberIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberIndexContext memberIndex() {
		MemberIndexContext _localctx = new MemberIndexContext(Context, State);
		EnterRule(_localctx, 82, RULE_memberIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			accessor();
			State = 466;
			expression();
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 467;
				Match(Comma);
				State = 468;
				expression();
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 474;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(GameMakerLanguageParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDotContext memberDot() {
		MemberDotContext _localctx = new MemberDotContext(Context, State);
		EnterRule(_localctx, 84, RULE_memberDot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(Dot);
			State = 477;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 86, RULE_methodInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(GameMakerLanguageParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ListAccessor() { return GetToken(GameMakerLanguageParser.ListAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MapAccessor() { return GetToken(GameMakerLanguageParser.MapAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GridAccessor() { return GetToken(GameMakerLanguageParser.GridAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrayAccessor() { return GetToken(GameMakerLanguageParser.ArrayAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StructAccessor() { return GetToken(GameMakerLanguageParser.StructAccessor, 0); }
		public AccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorContext accessor() {
		AccessorContext _localctx = new AccessorContext(Context, State);
		EnterRule(_localctx, 88, RULE_accessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 504L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 90, RULE_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(OpenParen);
			State = 484;
			argumentList();
			State = 485;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 92, RULE_argumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 487;
					Match(Comma);
					}
					} 
				}
				State = 492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590496760L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8250640566335L) != 0)) {
				{
				State = 493;
				expression();
				}
			}

			State = 504;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 497;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 496;
						Match(Comma);
						}
						}
						State = 499;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Comma );
					State = 501;
					expression();
					}
					} 
				}
				State = 506;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 507;
				Match(Comma);
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(GameMakerLanguageParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(GameMakerLanguageParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(GameMakerLanguageParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(GameMakerLanguageParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(GameMakerLanguageParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(GameMakerLanguageParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(GameMakerLanguageParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(GameMakerLanguageParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(GameMakerLanguageParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(GameMakerLanguageParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalescingAssign() { return GetToken(GameMakerLanguageParser.NullCoalescingAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 94, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1151795639060267008L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Undefined() { return GetToken(GameMakerLanguageParser.Undefined, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoOne() { return GetToken(GameMakerLanguageParser.NoOne, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(GameMakerLanguageParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(GameMakerLanguageParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbatimStringLiteral() { return GetToken(GameMakerLanguageParser.VerbatimStringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(GameMakerLanguageParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryLiteral() { return GetToken(GameMakerLanguageParser.BinaryLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(GameMakerLanguageParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(GameMakerLanguageParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructLiteralContext structLiteral() {
			return GetRuleContext<StructLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_literal);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Undefined:
				EnterOuterAlt(_localctx, 1);
				{
				State = 515;
				Match(Undefined);
				}
				break;
			case NoOne:
				EnterOuterAlt(_localctx, 2);
				{
				State = 516;
				Match(NoOne);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 517;
				Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 518;
				Match(StringLiteral);
				}
				break;
			case VerbatimStringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 519;
				Match(VerbatimStringLiteral);
				}
				break;
			case TemplateStringStart:
				EnterOuterAlt(_localctx, 6);
				{
				State = 520;
				templateStringLiteral();
				}
				break;
			case HexIntegerLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 521;
				Match(HexIntegerLiteral);
				}
				break;
			case BinaryLiteral:
				EnterOuterAlt(_localctx, 8);
				{
				State = 522;
				Match(BinaryLiteral);
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 9);
				{
				State = 523;
				Match(DecimalLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 10);
				{
				State = 524;
				Match(IntegerLiteral);
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 11);
				{
				State = 525;
				arrayLiteral();
				}
				break;
			case OpenBrace:
			case Begin:
				EnterOuterAlt(_localctx, 12);
				{
				State = 526;
				structLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStart() { return GetToken(GameMakerLanguageParser.TemplateStringStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringEnd() { return GetToken(GameMakerLanguageParser.TemplateStringEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(TemplateStringStart);
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringText) {
				{
				{
				State = 530;
				templateStringAtom();
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 536;
			Match(TemplateStringEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringText() { return GetToken(GameMakerLanguageParser.TemplateStringText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(GameMakerLanguageParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringEndExpression() { return GetToken(GameMakerLanguageParser.TemplateStringEndExpression, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 100, RULE_templateStringAtom);
		try {
			State = 543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringText:
				EnterOuterAlt(_localctx, 1);
				{
				State = 538;
				Match(TemplateStringText);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 539;
				Match(TemplateStringStartExpression);
				State = 540;
				expression();
				State = 541;
				Match(TemplateStringEndExpression);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(GameMakerLanguageParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(GameMakerLanguageParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_arrayLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(OpenBracket);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036590496760L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8250640566335L) != 0)) {
				{
				State = 546;
				expression();
				State = 551;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 547;
						Match(Comma);
						State = 548;
						expression();
						}
						} 
					}
					State = 553;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				}
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 554;
					Match(Comma);
					}
				}

				}
			}

			State = 559;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenBlockContext openBlock() {
			return GetRuleContext<OpenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseBlockContext closeBlock() {
			return GetRuleContext<CloseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public StructLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructLiteralContext structLiteral() {
		StructLiteralContext _localctx = new StructLiteralContext(Context, State);
		EnterRule(_localctx, 104, RULE_structLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			openBlock();
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 51673825281L) != 0)) {
				{
				State = 562;
				propertyAssignment();
				State = 567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 563;
						Match(Comma);
						State = 564;
						propertyAssignment();
						}
						} 
					}
					State = 569;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				}
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 570;
					Match(Comma);
					}
				}

				}
			}

			State = 575;
			closeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyIdentifierContext propertyIdentifier() {
			return GetRuleContext<PropertyIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(GameMakerLanguageParser.StringLiteral, 0); }
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 106, RULE_propertyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NoOne:
			case Constructor:
			case Identifier:
				{
				State = 577;
				propertyIdentifier();
				}
				break;
			case StringLiteral:
				{
				State = 578;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 581;
			Match(Colon);
			State = 582;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SoftKeywordContext softKeyword() {
			return GetRuleContext<SoftKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySoftKeywordContext propertySoftKeyword() {
			return GetRuleContext<PropertySoftKeywordContext>(0);
		}
		public PropertyIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyIdentifierContext propertyIdentifier() {
		PropertyIdentifierContext _localctx = new PropertyIdentifierContext(Context, State);
		EnterRule(_localctx, 108, RULE_propertyIdentifier);
		try {
			State = 587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				Match(Identifier);
				}
				break;
			case Constructor:
				EnterOuterAlt(_localctx, 2);
				{
				State = 585;
				softKeyword();
				}
				break;
			case NoOne:
				EnterOuterAlt(_localctx, 3);
				{
				State = 586;
				propertySoftKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(GameMakerLanguageParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorClauseContext constructorClause() {
			return GetRuleContext<ConstructorClauseContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(Function);
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 590;
				Match(Identifier);
				}
			}

			State = 593;
			parameterList();
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon || _la==Constructor) {
				{
				State = 594;
				constructorClause();
				}
			}

			State = 597;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(GameMakerLanguageParser.Constructor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ConstructorClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorClauseContext constructorClause() {
		ConstructorClauseContext _localctx = new ConstructorClauseContext(Context, State);
		EnterRule(_localctx, 112, RULE_constructorClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 599;
				Match(Colon);
				State = 600;
				Match(Identifier);
				State = 601;
				arguments();
				}
			}

			State = 604;
			Match(Constructor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 114, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			Match(OpenParen);
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Constructor || _la==Identifier) {
				{
				State = 607;
				parameter();
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 608;
						Match(Comma);
						State = 609;
						parameter();
						}
						} 
					}
					State = 614;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 615;
					Match(Comma);
					}
				}

				}
			}

			State = 620;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 116, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			identifier();
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 623;
				Match(Assign);
				State = 624;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SoftKeywordContext softKeyword() {
			return GetRuleContext<SoftKeywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 118, RULE_identifier);
		try {
			State = 629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627;
				Match(Identifier);
				}
				break;
			case Constructor:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628;
				softKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(GameMakerLanguageParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorBlockContext enumeratorBlock() {
			return GetRuleContext<EnumeratorBlockContext>(0);
		}
		public EnumeratorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorDeclarationContext enumeratorDeclaration() {
		EnumeratorDeclarationContext _localctx = new EnumeratorDeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_enumeratorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(Enum);
			State = 632;
			identifier();
			State = 633;
			enumeratorBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenBlockContext openBlock() {
			return GetRuleContext<OpenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseBlockContext closeBlock() {
			return GetRuleContext<CloseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public EnumeratorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorBlockContext enumeratorBlock() {
		EnumeratorBlockContext _localctx = new EnumeratorBlockContext(Context, State);
		EnterRule(_localctx, 122, RULE_enumeratorBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			openBlock();
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Constructor || _la==Identifier) {
				{
				State = 636;
				enumerator();
				State = 641;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 637;
						Match(Comma);
						State = 638;
						enumerator();
						}
						} 
					}
					State = 643;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				}
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 644;
					Match(Comma);
					}
				}

				}
			}

			State = 649;
			closeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 124, RULE_enumerator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			identifier();
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 652;
				Match(Assign);
				State = 653;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Macro() { return GetToken(GameMakerLanguageParser.Macro, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(GameMakerLanguageParser.LineTerminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GameMakerLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroTokenContext[] macroToken() {
			return GetRuleContexts<MacroTokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroTokenContext macroToken(int i) {
			return GetRuleContext<MacroTokenContext>(i);
		}
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_macroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(Macro);
			State = 657;
			identifier();
			State = 659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 658;
				macroToken();
				}
				}
				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -8L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1978622713790463L) != 0) );
			State = 663;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==LineTerminator) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Define() { return GetToken(GameMakerLanguageParser.Define, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegionCharacters() { return GetToken(GameMakerLanguageParser.RegionCharacters, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegionEOL() { return GetToken(GameMakerLanguageParser.RegionEOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GameMakerLanguageParser.Eof, 0); }
		public DefineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineStatementContext defineStatement() {
		DefineStatementContext _localctx = new DefineStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_defineStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			Match(Define);
			State = 666;
			Match(RegionCharacters);
			State = 667;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==RegionEOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Region() { return GetToken(GameMakerLanguageParser.Region, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndRegion() { return GetToken(GameMakerLanguageParser.EndRegion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegionEOL() { return GetToken(GameMakerLanguageParser.RegionEOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GameMakerLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegionCharacters() { return GetToken(GameMakerLanguageParser.RegionCharacters, 0); }
		public RegionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegionStatementContext regionStatement() {
		RegionStatementContext _localctx = new RegionStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_regionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			_la = TokenStream.LA(1);
			if ( !(_la==Region || _la==EndRegion) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RegionCharacters) {
				{
				State = 670;
				Match(RegionCharacters);
				}
			}

			State = 673;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==RegionEOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementContext identifierStatement() {
		IdentifierStatementContext _localctx = new IdentifierStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_identifierStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoftKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(GameMakerLanguageParser.Constructor, 0); }
		public SoftKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_softKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoftKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoftKeywordContext softKeyword() {
		SoftKeywordContext _localctx = new SoftKeywordContext(Context, State);
		EnterRule(_localctx, 134, RULE_softKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			Match(Constructor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySoftKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoOne() { return GetToken(GameMakerLanguageParser.NoOne, 0); }
		public PropertySoftKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySoftKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySoftKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySoftKeywordContext propertySoftKeyword() {
		PropertySoftKeywordContext _localctx = new PropertySoftKeywordContext(Context, State);
		EnterRule(_localctx, 136, RULE_propertySoftKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(NoOne);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(GameMakerLanguageParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(GameMakerLanguageParser.Begin, 0); }
		public OpenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenBlockContext openBlock() {
		OpenBlockContext _localctx = new OpenBlockContext(Context, State);
		EnterRule(_localctx, 138, RULE_openBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = TokenStream.LA(1);
			if ( !(_la==OpenBrace || _la==Begin) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(GameMakerLanguageParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(GameMakerLanguageParser.End, 0); }
		public CloseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseBlockContext closeBlock() {
		CloseBlockContext _localctx = new CloseBlockContext(Context, State);
		EnterRule(_localctx, 140, RULE_closeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			_la = TokenStream.LA(1);
			if ( !(_la==CloseBrace || _la==End) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(GameMakerLanguageParser.SemiColon, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 142, RULE_eos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapedNewLine() { return GetToken(GameMakerLanguageParser.EscapedNewLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(GameMakerLanguageParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(GameMakerLanguageParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(GameMakerLanguageParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(GameMakerLanguageParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(GameMakerLanguageParser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(GameMakerLanguageParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(GameMakerLanguageParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(GameMakerLanguageParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(GameMakerLanguageParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(GameMakerLanguageParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(GameMakerLanguageParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(GameMakerLanguageParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(GameMakerLanguageParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(GameMakerLanguageParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(GameMakerLanguageParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(GameMakerLanguageParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(GameMakerLanguageParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(GameMakerLanguageParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(GameMakerLanguageParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(GameMakerLanguageParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(GameMakerLanguageParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(GameMakerLanguageParser.NullCoalesce, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalescingAssign() { return GetToken(GameMakerLanguageParser.NullCoalescingAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(GameMakerLanguageParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(GameMakerLanguageParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(GameMakerLanguageParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(GameMakerLanguageParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(GameMakerLanguageParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(GameMakerLanguageParser.GreaterThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(GameMakerLanguageParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(GameMakerLanguageParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(GameMakerLanguageParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(GameMakerLanguageParser.BitXOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(GameMakerLanguageParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(GameMakerLanguageParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(GameMakerLanguageParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xor() { return GetToken(GameMakerLanguageParser.Xor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(GameMakerLanguageParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(GameMakerLanguageParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(GameMakerLanguageParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(GameMakerLanguageParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(GameMakerLanguageParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(GameMakerLanguageParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(GameMakerLanguageParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(GameMakerLanguageParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(GameMakerLanguageParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(GameMakerLanguageParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberSign() { return GetToken(GameMakerLanguageParser.NumberSign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DollarSign() { return GetToken(GameMakerLanguageParser.DollarSign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AtSign() { return GetToken(GameMakerLanguageParser.AtSign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Undefined() { return GetToken(GameMakerLanguageParser.Undefined, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoOne() { return GetToken(GameMakerLanguageParser.NoOne, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(GameMakerLanguageParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(GameMakerLanguageParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(GameMakerLanguageParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryLiteral() { return GetToken(GameMakerLanguageParser.BinaryLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(GameMakerLanguageParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(GameMakerLanguageParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exit() { return GetToken(GameMakerLanguageParser.Exit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(GameMakerLanguageParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(GameMakerLanguageParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(GameMakerLanguageParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(GameMakerLanguageParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(GameMakerLanguageParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalVar() { return GetToken(GameMakerLanguageParser.GlobalVar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(GameMakerLanguageParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(GameMakerLanguageParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(GameMakerLanguageParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(GameMakerLanguageParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(GameMakerLanguageParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(GameMakerLanguageParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(GameMakerLanguageParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(GameMakerLanguageParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(GameMakerLanguageParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(GameMakerLanguageParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(GameMakerLanguageParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(GameMakerLanguageParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(GameMakerLanguageParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(GameMakerLanguageParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(GameMakerLanguageParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(GameMakerLanguageParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(GameMakerLanguageParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(GameMakerLanguageParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(GameMakerLanguageParser.Constructor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(GameMakerLanguageParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(GameMakerLanguageParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbatimStringLiteral() { return GetToken(GameMakerLanguageParser.VerbatimStringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStart() { return GetToken(GameMakerLanguageParser.TemplateStringStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringEnd() { return GetToken(GameMakerLanguageParser.TemplateStringEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringText() { return GetToken(GameMakerLanguageParser.TemplateStringText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(GameMakerLanguageParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringEndExpression() { return GetToken(GameMakerLanguageParser.TemplateStringEndExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ListAccessor() { return GetToken(GameMakerLanguageParser.ListAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MapAccessor() { return GetToken(GameMakerLanguageParser.MapAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GridAccessor() { return GetToken(GameMakerLanguageParser.GridAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrayAccessor() { return GetToken(GameMakerLanguageParser.ArrayAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StructAccessor() { return GetToken(GameMakerLanguageParser.StructAccessor, 0); }
		public MacroTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroTokenContext macroToken() {
		MacroTokenContext _localctx = new MacroTokenContext(Context, State);
		EnterRule(_localctx, 144, RULE_macroToken);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -8L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1978622713790463L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,114,690,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,1,0,3,0,148,8,0,1,0,1,0,1,1,1,1,4,1,154,8,1,11,1,12,
		1,155,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,177,8,2,1,3,1,3,5,3,181,8,3,10,3,12,3,184,9,3,1,4,1,4,
		3,4,188,8,4,1,4,1,4,1,5,1,5,1,5,3,5,195,8,5,1,5,1,5,1,5,3,5,200,8,5,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,214,8,6,1,6,1,6,3,6,
		218,8,6,1,6,1,6,3,6,222,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,230,8,6,1,7,1,
		7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
		13,5,13,250,8,13,10,13,12,13,253,9,13,1,13,1,13,1,14,1,14,1,14,3,14,260,
		8,14,1,14,1,14,1,14,1,14,3,14,266,8,14,3,14,268,8,14,1,15,1,15,1,15,1,
		16,1,16,1,16,1,16,3,16,277,8,16,1,16,3,16,280,8,16,1,17,1,17,1,17,3,17,
		285,8,17,1,17,3,17,288,8,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,3,19,297,
		8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,310,8,
		21,10,21,12,21,313,9,21,3,21,315,8,21,1,22,4,22,318,8,22,11,22,12,22,319,
		1,22,1,22,3,22,324,8,22,1,23,1,23,1,23,3,23,329,8,23,1,24,1,24,3,24,333,
		8,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,341,8,25,1,26,1,26,1,26,5,26,346,
		8,26,10,26,12,26,349,9,26,1,27,1,27,1,27,5,27,354,8,27,10,27,12,27,357,
		9,27,1,28,1,28,1,28,5,28,362,8,28,10,28,12,28,365,9,28,1,29,1,29,1,29,
		3,29,370,8,29,1,30,1,30,1,30,5,30,375,8,30,10,30,12,30,378,9,30,1,31,1,
		31,1,31,5,31,383,8,31,10,31,12,31,386,9,31,1,32,1,32,1,32,5,32,391,8,32,
		10,32,12,32,394,9,32,1,33,1,33,1,33,5,33,399,8,33,10,33,12,33,402,9,33,
		1,34,1,34,1,34,5,34,407,8,34,10,34,12,34,410,9,34,1,35,1,35,1,35,5,35,
		415,8,35,10,35,12,35,418,9,35,1,36,1,36,1,36,5,36,423,8,36,10,36,12,36,
		426,9,36,1,37,1,37,1,37,5,37,431,8,37,10,37,12,37,434,9,37,1,38,1,38,1,
		38,3,38,439,8,38,1,39,1,39,1,39,1,39,5,39,445,8,39,10,39,12,39,448,9,39,
		1,39,3,39,451,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,461,8,
		40,1,40,3,40,464,8,40,1,41,1,41,1,41,1,41,5,41,470,8,41,10,41,12,41,473,
		9,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,
		1,46,5,46,489,8,46,10,46,12,46,492,9,46,1,46,3,46,495,8,46,1,46,4,46,498,
		8,46,11,46,12,46,499,1,46,5,46,503,8,46,10,46,12,46,506,9,46,1,46,5,46,
		509,8,46,10,46,12,46,512,9,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,3,48,528,8,48,1,49,1,49,5,49,532,8,49,10,
		49,12,49,535,9,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,3,50,544,8,50,1,51,
		1,51,1,51,1,51,5,51,550,8,51,10,51,12,51,553,9,51,1,51,3,51,556,8,51,3,
		51,558,8,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,566,8,52,10,52,12,52,569,
		9,52,1,52,3,52,572,8,52,3,52,574,8,52,1,52,1,52,1,53,1,53,3,53,580,8,53,
		1,53,1,53,1,53,1,54,1,54,1,54,3,54,588,8,54,1,55,1,55,3,55,592,8,55,1,
		55,1,55,3,55,596,8,55,1,55,1,55,1,56,1,56,1,56,3,56,603,8,56,1,56,1,56,
		1,57,1,57,1,57,1,57,5,57,611,8,57,10,57,12,57,614,9,57,1,57,3,57,617,8,
		57,3,57,619,8,57,1,57,1,57,1,58,1,58,1,58,3,58,626,8,58,1,59,1,59,3,59,
		630,8,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,640,8,61,10,61,12,
		61,643,9,61,1,61,3,61,646,8,61,3,61,648,8,61,1,61,1,61,1,62,1,62,1,62,
		3,62,655,8,62,1,63,1,63,1,63,4,63,660,8,63,11,63,12,63,661,1,63,1,63,1,
		64,1,64,1,64,1,64,1,65,1,65,3,65,672,8,65,1,65,1,65,1,66,1,66,1,67,1,67,
		1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,0,0,73,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,0,15,2,0,19,19,42,43,1,0,38,41,1,0,36,37,1,0,24,25,1,0,
		28,31,1,0,22,27,1,0,22,23,1,0,3,8,3,0,19,19,35,35,50,59,1,1,108,108,1,
		1,111,111,1,0,101,102,2,0,12,12,15,15,2,0,14,14,16,16,4,0,3,97,99,99,103,
		106,112,114,727,0,147,1,0,0,0,2,153,1,0,0,0,4,176,1,0,0,0,6,178,1,0,0,
		0,8,185,1,0,0,0,10,191,1,0,0,0,12,229,1,0,0,0,14,231,1,0,0,0,16,235,1,
		0,0,0,18,239,1,0,0,0,20,241,1,0,0,0,22,243,1,0,0,0,24,245,1,0,0,0,26,247,
		1,0,0,0,28,267,1,0,0,0,30,269,1,0,0,0,32,272,1,0,0,0,34,281,1,0,0,0,36,
		291,1,0,0,0,38,294,1,0,0,0,40,298,1,0,0,0,42,314,1,0,0,0,44,323,1,0,0,
		0,46,325,1,0,0,0,48,332,1,0,0,0,50,334,1,0,0,0,52,342,1,0,0,0,54,350,1,
		0,0,0,56,358,1,0,0,0,58,366,1,0,0,0,60,371,1,0,0,0,62,379,1,0,0,0,64,387,
		1,0,0,0,66,395,1,0,0,0,68,403,1,0,0,0,70,411,1,0,0,0,72,419,1,0,0,0,74,
		427,1,0,0,0,76,438,1,0,0,0,78,440,1,0,0,0,80,463,1,0,0,0,82,465,1,0,0,
		0,84,476,1,0,0,0,86,479,1,0,0,0,88,481,1,0,0,0,90,483,1,0,0,0,92,490,1,
		0,0,0,94,513,1,0,0,0,96,527,1,0,0,0,98,529,1,0,0,0,100,543,1,0,0,0,102,
		545,1,0,0,0,104,561,1,0,0,0,106,579,1,0,0,0,108,587,1,0,0,0,110,589,1,
		0,0,0,112,602,1,0,0,0,114,606,1,0,0,0,116,622,1,0,0,0,118,629,1,0,0,0,
		120,631,1,0,0,0,122,635,1,0,0,0,124,651,1,0,0,0,126,656,1,0,0,0,128,665,
		1,0,0,0,130,669,1,0,0,0,132,675,1,0,0,0,134,677,1,0,0,0,136,679,1,0,0,
		0,138,681,1,0,0,0,140,683,1,0,0,0,142,685,1,0,0,0,144,687,1,0,0,0,146,
		148,3,2,1,0,147,146,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,149,150,5,
		0,0,1,150,1,1,0,0,0,151,154,3,6,3,0,152,154,3,24,12,0,153,151,1,0,0,0,
		153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,3,
		1,0,0,0,157,177,3,8,4,0,158,177,3,42,21,0,159,177,3,76,38,0,160,177,3,
		10,5,0,161,177,3,12,6,0,162,177,3,18,9,0,163,177,3,20,10,0,164,177,3,38,
		19,0,165,177,3,14,7,0,166,177,3,16,8,0,167,177,3,32,16,0,168,177,3,30,
		15,0,169,177,3,22,11,0,170,177,3,126,63,0,171,177,3,128,64,0,172,177,3,
		130,65,0,173,177,3,120,60,0,174,177,3,110,55,0,175,177,3,40,20,0,176,157,
		1,0,0,0,176,158,1,0,0,0,176,159,1,0,0,0,176,160,1,0,0,0,176,161,1,0,0,
		0,176,162,1,0,0,0,176,163,1,0,0,0,176,164,1,0,0,0,176,165,1,0,0,0,176,
		166,1,0,0,0,176,167,1,0,0,0,176,168,1,0,0,0,176,169,1,0,0,0,176,170,1,
		0,0,0,176,171,1,0,0,0,176,172,1,0,0,0,176,173,1,0,0,0,176,174,1,0,0,0,
		176,175,1,0,0,0,177,5,1,0,0,0,178,182,3,4,2,0,179,181,3,142,71,0,180,179,
		1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,7,1,0,0,0,
		184,182,1,0,0,0,185,187,3,138,69,0,186,188,3,2,1,0,187,186,1,0,0,0,187,
		188,1,0,0,0,188,189,1,0,0,0,189,190,3,140,70,0,190,9,1,0,0,0,191,192,5,
		90,0,0,192,194,3,48,24,0,193,195,5,91,0,0,194,193,1,0,0,0,194,195,1,0,
		0,0,195,196,1,0,0,0,196,199,3,6,3,0,197,198,5,74,0,0,198,200,3,6,3,0,199,
		197,1,0,0,0,199,200,1,0,0,0,200,11,1,0,0,0,201,202,5,72,0,0,202,203,3,
		6,3,0,203,204,5,85,0,0,204,205,3,48,24,0,205,230,1,0,0,0,206,207,5,84,
		0,0,207,208,3,48,24,0,208,209,3,6,3,0,209,230,1,0,0,0,210,211,5,82,0,0,
		211,213,5,10,0,0,212,214,3,4,2,0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,
		1,0,0,0,215,217,5,17,0,0,216,218,3,48,24,0,217,216,1,0,0,0,217,218,1,0,
		0,0,218,219,1,0,0,0,219,221,5,17,0,0,220,222,3,6,3,0,221,220,1,0,0,0,221,
		222,1,0,0,0,222,223,1,0,0,0,223,224,5,11,0,0,224,230,3,6,3,0,225,226,5,
		86,0,0,226,227,3,48,24,0,227,228,3,6,3,0,228,230,1,0,0,0,229,201,1,0,0,
		0,229,206,1,0,0,0,229,210,1,0,0,0,229,225,1,0,0,0,230,13,1,0,0,0,231,232,
		5,88,0,0,232,233,3,48,24,0,233,234,3,6,3,0,234,15,1,0,0,0,235,236,5,83,
		0,0,236,237,3,48,24,0,237,238,3,26,13,0,238,17,1,0,0,0,239,240,5,81,0,
		0,240,19,1,0,0,0,241,242,5,70,0,0,242,21,1,0,0,0,243,244,5,71,0,0,244,
		23,1,0,0,0,245,246,5,17,0,0,246,25,1,0,0,0,247,251,3,138,69,0,248,250,
		3,28,14,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,
		0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,3,140,70,0,255,27,1,0,0,0,
		256,257,5,89,0,0,257,259,5,20,0,0,258,260,3,2,1,0,259,258,1,0,0,0,259,
		260,1,0,0,0,260,268,1,0,0,0,261,262,5,73,0,0,262,263,3,48,24,0,263,265,
		5,20,0,0,264,266,3,2,1,0,265,264,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,
		0,267,256,1,0,0,0,267,261,1,0,0,0,268,29,1,0,0,0,269,270,5,92,0,0,270,
		271,3,48,24,0,271,31,1,0,0,0,272,273,5,94,0,0,273,279,3,6,3,0,274,276,
		3,34,17,0,275,277,3,36,18,0,276,275,1,0,0,0,276,277,1,0,0,0,277,280,1,
		0,0,0,278,280,3,36,18,0,279,274,1,0,0,0,279,278,1,0,0,0,280,33,1,0,0,0,
		281,287,5,78,0,0,282,284,5,10,0,0,283,285,3,118,59,0,284,283,1,0,0,0,284,
		285,1,0,0,0,285,286,1,0,0,0,286,288,5,11,0,0,287,282,1,0,0,0,287,288,1,
		0,0,0,288,289,1,0,0,0,289,290,3,6,3,0,290,35,1,0,0,0,291,292,5,79,0,0,
		292,293,3,6,3,0,293,37,1,0,0,0,294,296,5,80,0,0,295,297,3,48,24,0,296,
		295,1,0,0,0,296,297,1,0,0,0,297,39,1,0,0,0,298,299,5,93,0,0,299,300,3,
		48,24,0,300,41,1,0,0,0,301,302,3,78,39,0,302,303,3,94,47,0,303,304,3,48,
		24,0,304,315,1,0,0,0,305,306,3,44,22,0,306,311,3,46,23,0,307,308,5,18,
		0,0,308,310,3,46,23,0,309,307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,
		311,312,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,314,301,1,0,0,0,314,305,
		1,0,0,0,315,43,1,0,0,0,316,318,5,76,0,0,317,316,1,0,0,0,318,319,1,0,0,
		0,319,317,1,0,0,0,319,320,1,0,0,0,320,324,1,0,0,0,321,324,5,97,0,0,322,
		324,5,77,0,0,323,317,1,0,0,0,323,321,1,0,0,0,323,322,1,0,0,0,324,45,1,
		0,0,0,325,328,3,118,59,0,326,327,5,19,0,0,327,329,3,48,24,0,328,326,1,
		0,0,0,328,329,1,0,0,0,329,47,1,0,0,0,330,333,3,50,25,0,331,333,3,110,55,
		0,332,330,1,0,0,0,332,331,1,0,0,0,333,49,1,0,0,0,334,340,3,52,26,0,335,
		336,5,33,0,0,336,337,3,48,24,0,337,338,5,20,0,0,338,339,3,48,24,0,339,
		341,1,0,0,0,340,335,1,0,0,0,340,341,1,0,0,0,341,51,1,0,0,0,342,347,3,54,
		27,0,343,344,5,45,0,0,344,346,3,54,27,0,345,343,1,0,0,0,346,349,1,0,0,
		0,347,345,1,0,0,0,347,348,1,0,0,0,348,53,1,0,0,0,349,347,1,0,0,0,350,355,
		3,56,28,0,351,352,5,46,0,0,352,354,3,56,28,0,353,351,1,0,0,0,354,357,1,
		0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,55,1,0,0,0,357,355,1,0,0,0,358,
		363,3,58,29,0,359,360,5,44,0,0,360,362,3,58,29,0,361,359,1,0,0,0,362,365,
		1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,57,1,0,0,0,365,363,1,0,0,0,
		366,369,3,60,30,0,367,368,5,34,0,0,368,370,3,60,30,0,369,367,1,0,0,0,369,
		370,1,0,0,0,370,59,1,0,0,0,371,376,3,62,31,0,372,373,5,49,0,0,373,375,
		3,62,31,0,374,372,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,
		0,0,377,61,1,0,0,0,378,376,1,0,0,0,379,384,3,64,32,0,380,381,5,47,0,0,
		381,383,3,64,32,0,382,380,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,
		385,1,0,0,0,385,63,1,0,0,0,386,384,1,0,0,0,387,392,3,66,33,0,388,389,5,
		48,0,0,389,391,3,66,33,0,390,388,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,
		0,392,393,1,0,0,0,393,65,1,0,0,0,394,392,1,0,0,0,395,400,3,68,34,0,396,
		397,7,0,0,0,397,399,3,68,34,0,398,396,1,0,0,0,399,402,1,0,0,0,400,398,
		1,0,0,0,400,401,1,0,0,0,401,67,1,0,0,0,402,400,1,0,0,0,403,408,3,70,35,
		0,404,405,7,1,0,0,405,407,3,70,35,0,406,404,1,0,0,0,407,410,1,0,0,0,408,
		406,1,0,0,0,408,409,1,0,0,0,409,69,1,0,0,0,410,408,1,0,0,0,411,416,3,72,
		36,0,412,413,7,2,0,0,413,415,3,72,36,0,414,412,1,0,0,0,415,418,1,0,0,0,
		416,414,1,0,0,0,416,417,1,0,0,0,417,71,1,0,0,0,418,416,1,0,0,0,419,424,
		3,74,37,0,420,421,7,3,0,0,421,423,3,74,37,0,422,420,1,0,0,0,423,426,1,
		0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,73,1,0,0,0,426,424,1,0,0,0,427,
		432,3,76,38,0,428,429,7,4,0,0,429,431,3,76,38,0,430,428,1,0,0,0,431,434,
		1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,75,1,0,0,0,434,432,1,0,0,0,
		435,439,3,78,39,0,436,437,7,5,0,0,437,439,3,78,39,0,438,435,1,0,0,0,438,
		436,1,0,0,0,439,77,1,0,0,0,440,446,3,80,40,0,441,445,3,82,41,0,442,445,
		3,84,42,0,443,445,3,86,43,0,444,441,1,0,0,0,444,442,1,0,0,0,444,443,1,
		0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,450,1,0,0,0,
		448,446,1,0,0,0,449,451,7,6,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,79,
		1,0,0,0,452,464,3,96,48,0,453,464,3,118,59,0,454,455,5,10,0,0,455,456,
		3,48,24,0,456,457,5,11,0,0,457,464,1,0,0,0,458,460,5,75,0,0,459,461,3,
		118,59,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,464,3,90,
		45,0,463,452,1,0,0,0,463,453,1,0,0,0,463,454,1,0,0,0,463,458,1,0,0,0,464,
		81,1,0,0,0,465,466,3,88,44,0,466,471,3,48,24,0,467,468,5,18,0,0,468,470,
		3,48,24,0,469,467,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,
		0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,5,9,0,0,475,83,1,0,0,0,476,
		477,5,21,0,0,477,478,3,118,59,0,478,85,1,0,0,0,479,480,3,90,45,0,480,87,
		1,0,0,0,481,482,7,7,0,0,482,89,1,0,0,0,483,484,5,10,0,0,484,485,3,92,46,
		0,485,486,5,11,0,0,486,91,1,0,0,0,487,489,5,18,0,0,488,487,1,0,0,0,489,
		492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,494,1,0,0,0,492,490,1,
		0,0,0,493,495,3,48,24,0,494,493,1,0,0,0,494,495,1,0,0,0,495,504,1,0,0,
		0,496,498,5,18,0,0,497,496,1,0,0,0,498,499,1,0,0,0,499,497,1,0,0,0,499,
		500,1,0,0,0,500,501,1,0,0,0,501,503,3,48,24,0,502,497,1,0,0,0,503,506,
		1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,510,1,0,0,0,506,504,1,0,0,
		0,507,509,5,18,0,0,508,507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,
		511,1,0,0,0,511,93,1,0,0,0,512,510,1,0,0,0,513,514,7,8,0,0,514,95,1,0,
		0,0,515,528,5,68,0,0,516,528,5,69,0,0,517,528,5,63,0,0,518,528,5,104,0,
		0,519,528,5,106,0,0,520,528,3,98,49,0,521,528,5,67,0,0,522,528,5,66,0,
		0,523,528,5,65,0,0,524,528,5,64,0,0,525,528,3,102,51,0,526,528,3,104,52,
		0,527,515,1,0,0,0,527,516,1,0,0,0,527,517,1,0,0,0,527,518,1,0,0,0,527,
		519,1,0,0,0,527,520,1,0,0,0,527,521,1,0,0,0,527,522,1,0,0,0,527,523,1,
		0,0,0,527,524,1,0,0,0,527,525,1,0,0,0,527,526,1,0,0,0,528,97,1,0,0,0,529,
		533,5,105,0,0,530,532,3,100,50,0,531,530,1,0,0,0,532,535,1,0,0,0,533,531,
		1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,537,5,112,
		0,0,537,99,1,0,0,0,538,544,5,114,0,0,539,540,5,113,0,0,540,541,3,48,24,
		0,541,542,5,13,0,0,542,544,1,0,0,0,543,538,1,0,0,0,543,539,1,0,0,0,544,
		101,1,0,0,0,545,557,5,3,0,0,546,551,3,48,24,0,547,548,5,18,0,0,548,550,
		3,48,24,0,549,547,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,
		0,0,552,555,1,0,0,0,553,551,1,0,0,0,554,556,5,18,0,0,555,554,1,0,0,0,555,
		556,1,0,0,0,556,558,1,0,0,0,557,546,1,0,0,0,557,558,1,0,0,0,558,559,1,
		0,0,0,559,560,5,9,0,0,560,103,1,0,0,0,561,573,3,138,69,0,562,567,3,106,
		53,0,563,564,5,18,0,0,564,566,3,106,53,0,565,563,1,0,0,0,566,569,1,0,0,
		0,567,565,1,0,0,0,567,568,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,570,
		572,5,18,0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,562,1,
		0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,3,140,70,0,576,105,1,0,0,
		0,577,580,3,108,54,0,578,580,5,104,0,0,579,577,1,0,0,0,579,578,1,0,0,0,
		580,581,1,0,0,0,581,582,5,20,0,0,582,583,3,48,24,0,583,107,1,0,0,0,584,
		588,5,103,0,0,585,588,3,134,67,0,586,588,3,136,68,0,587,584,1,0,0,0,587,
		585,1,0,0,0,587,586,1,0,0,0,588,109,1,0,0,0,589,591,5,87,0,0,590,592,5,
		103,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,595,3,114,
		57,0,594,596,3,112,56,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,
		0,597,598,3,8,4,0,598,111,1,0,0,0,599,600,5,20,0,0,600,601,5,103,0,0,601,
		603,3,90,45,0,602,599,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,
		5,96,0,0,605,113,1,0,0,0,606,618,5,10,0,0,607,612,3,116,58,0,608,609,5,
		18,0,0,609,611,3,116,58,0,610,608,1,0,0,0,611,614,1,0,0,0,612,610,1,0,
		0,0,612,613,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,615,617,5,18,0,0,616,
		615,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,607,1,0,0,0,618,619,1,
		0,0,0,619,620,1,0,0,0,620,621,5,11,0,0,621,115,1,0,0,0,622,625,3,118,59,
		0,623,624,5,19,0,0,624,626,3,48,24,0,625,623,1,0,0,0,625,626,1,0,0,0,626,
		117,1,0,0,0,627,630,5,103,0,0,628,630,3,134,67,0,629,627,1,0,0,0,629,628,
		1,0,0,0,630,119,1,0,0,0,631,632,5,95,0,0,632,633,3,118,59,0,633,634,3,
		122,61,0,634,121,1,0,0,0,635,647,3,138,69,0,636,641,3,124,62,0,637,638,
		5,18,0,0,638,640,3,124,62,0,639,637,1,0,0,0,640,643,1,0,0,0,641,639,1,
		0,0,0,641,642,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,644,646,5,18,0,0,
		645,644,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,636,1,0,0,0,647,648,
		1,0,0,0,648,649,1,0,0,0,649,650,3,140,70,0,650,123,1,0,0,0,651,654,3,118,
		59,0,652,653,5,19,0,0,653,655,3,48,24,0,654,652,1,0,0,0,654,655,1,0,0,
		0,655,125,1,0,0,0,656,657,5,98,0,0,657,659,3,118,59,0,658,660,3,144,72,
		0,659,658,1,0,0,0,660,661,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,
		663,1,0,0,0,663,664,7,9,0,0,664,127,1,0,0,0,665,666,5,100,0,0,666,667,
		5,110,0,0,667,668,7,10,0,0,668,129,1,0,0,0,669,671,7,11,0,0,670,672,5,
		110,0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,674,7,10,0,
		0,674,131,1,0,0,0,675,676,3,118,59,0,676,133,1,0,0,0,677,678,5,96,0,0,
		678,135,1,0,0,0,679,680,5,69,0,0,680,137,1,0,0,0,681,682,7,12,0,0,682,
		139,1,0,0,0,683,684,7,13,0,0,684,141,1,0,0,0,685,686,5,17,0,0,686,143,
		1,0,0,0,687,688,7,14,0,0,688,145,1,0,0,0,77,147,153,155,176,182,187,194,
		199,213,217,221,229,251,259,265,267,276,279,284,287,296,311,314,319,323,
		328,332,340,347,355,363,369,376,384,392,400,408,416,424,432,438,444,446,
		450,460,463,471,490,494,499,504,510,527,533,543,551,555,557,567,571,573,
		579,587,591,595,602,612,616,618,625,629,641,645,647,654,661,671
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
