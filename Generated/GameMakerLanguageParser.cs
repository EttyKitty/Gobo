//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GameMakerLanguageParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class GameMakerLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, OpenBracket=3, ListAccessor=4, 
		MapAccessor=5, GridAccessor=6, ArrayAccessor=7, StructAccessor=8, CloseBracket=9, 
		OpenParen=10, CloseParen=11, OpenBrace=12, TemplateStringEndExpression=13, 
		CloseBrace=14, Begin=15, End=16, SemiColon=17, Comma=18, Assign=19, Colon=20, 
		Dot=21, PlusPlus=22, MinusMinus=23, Plus=24, Minus=25, BitNot=26, Not=27, 
		Multiply=28, Divide=29, IntegerDivide=30, Modulo=31, Power=32, QuestionMark=33, 
		NullCoalesce=34, NullCoalescingAssign=35, RightShiftArithmetic=36, LeftShiftArithmetic=37, 
		LessThan=38, MoreThan=39, LessThanEquals=40, GreaterThanEquals=41, Equals_=42, 
		NotEquals=43, BitAnd=44, BitXOr=45, BitOr=46, And=47, Or=48, Xor=49, MultiplyAssign=50, 
		DivideAssign=51, PlusAssign=52, MinusAssign=53, ModulusAssign=54, LeftShiftArithmeticAssign=55, 
		RightShiftArithmeticAssign=56, BitAndAssign=57, BitXorAssign=58, BitOrAssign=59, 
		NumberSign=60, DollarSign=61, AtSign=62, BooleanLiteral=63, IntegerLiteral=64, 
		DecimalLiteral=65, BinaryLiteral=66, HexIntegerLiteral=67, Undefined=68, 
		NoOne=69, Break=70, Exit=71, Do=72, Case=73, Else=74, New=75, Var=76, 
		GlobalVar=77, Catch=78, Finally=79, Return=80, Continue=81, For=82, Switch=83, 
		While=84, Until=85, Repeat=86, Function=87, With=88, Default=89, If=90, 
		Then=91, Throw=92, Delete=93, Try=94, Enum=95, Constructor=96, Static=97, 
		Macro=98, EscapedNewLine=99, Define=100, Region=101, EndRegion=102, Identifier=103, 
		StringLiteral=104, TemplateStringStart=105, VerbatimStringLiteral=106, 
		WhiteSpaces=107, LineTerminator=108, UnexpectedCharacter=109, RegionCharacters=110, 
		RegionEOL=111, TemplateStringEnd=112, TemplateStringStartExpression=113, 
		TemplateStringText=114;
	public const int
		RULE_program = 0, RULE_statementList = 1, RULE_statement = 2, RULE_block = 3, 
		RULE_ifStatement = 4, RULE_iterationStatement = 5, RULE_withStatement = 6, 
		RULE_switchStatement = 7, RULE_continueStatement = 8, RULE_breakStatement = 9, 
		RULE_exitStatement = 10, RULE_emptyStatement = 11, RULE_caseBlock = 12, 
		RULE_caseClauses = 13, RULE_caseClause = 14, RULE_defaultClause = 15, 
		RULE_throwStatement = 16, RULE_tryStatement = 17, RULE_catchProduction = 18, 
		RULE_finallyProduction = 19, RULE_returnStatement = 20, RULE_deleteStatement = 21, 
		RULE_assignmentExpression = 22, RULE_variableDeclarationList = 23, RULE_varModifier = 24, 
		RULE_variableDeclaration = 25, RULE_typeAnnotation = 26, RULE_globalVarStatement = 27, 
		RULE_lValueStartExpression = 28, RULE_lValueExpression = 29, RULE_lValueChainOperator = 30, 
		RULE_lValueFinalOperator = 31, RULE_newExpression = 32, RULE_expressionSequence = 33, 
		RULE_expressionOrFunction = 34, RULE_expression = 35, RULE_callStatement = 36, 
		RULE_callableExpression = 37, RULE_incDecStatement = 38, RULE_accessor = 39, 
		RULE_arguments = 40, RULE_assignmentOperator = 41, RULE_literal = 42, 
		RULE_templateStringLiteral = 43, RULE_templateStringAtom = 44, RULE_arrayLiteral = 45, 
		RULE_elementList = 46, RULE_structLiteral = 47, RULE_propertyAssignment = 48, 
		RULE_propertyIdentifier = 49, RULE_functionDeclaration = 50, RULE_constructorClause = 51, 
		RULE_parameterList = 52, RULE_parameterArgument = 53, RULE_identifier = 54, 
		RULE_enumeratorDeclaration = 55, RULE_enumeratorList = 56, RULE_enumerator = 57, 
		RULE_macroStatement = 58, RULE_defineStatement = 59, RULE_regionStatement = 60, 
		RULE_identifierStatement = 61, RULE_softKeyword = 62, RULE_propertySoftKeyword = 63, 
		RULE_openBlock = 64, RULE_closeBlock = 65, RULE_eos = 66, RULE_macroToken = 67;
	public static readonly string[] ruleNames = {
		"program", "statementList", "statement", "block", "ifStatement", "iterationStatement", 
		"withStatement", "switchStatement", "continueStatement", "breakStatement", 
		"exitStatement", "emptyStatement", "caseBlock", "caseClauses", "caseClause", 
		"defaultClause", "throwStatement", "tryStatement", "catchProduction", 
		"finallyProduction", "returnStatement", "deleteStatement", "assignmentExpression", 
		"variableDeclarationList", "varModifier", "variableDeclaration", "typeAnnotation", 
		"globalVarStatement", "lValueStartExpression", "lValueExpression", "lValueChainOperator", 
		"lValueFinalOperator", "newExpression", "expressionSequence", "expressionOrFunction", 
		"expression", "callStatement", "callableExpression", "incDecStatement", 
		"accessor", "arguments", "assignmentOperator", "literal", "templateStringLiteral", 
		"templateStringAtom", "arrayLiteral", "elementList", "structLiteral", 
		"propertyAssignment", "propertyIdentifier", "functionDeclaration", "constructorClause", 
		"parameterList", "parameterArgument", "identifier", "enumeratorDeclaration", 
		"enumeratorList", "enumerator", "macroStatement", "defineStatement", "regionStatement", 
		"identifierStatement", "softKeyword", "propertySoftKeyword", "openBlock", 
		"closeBlock", "eos", "macroToken"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'['", "'[|'", "'[?'", "'[#'", "'[@'", "'[$'", "']'", 
		"'('", "')'", null, null, "'}'", "'begin'", "'end'", "';'", "','", null, 
		"':'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", null, "'*'", "'/'", 
		"'div'", null, "'**'", "'?'", "'??'", "'??='", "'>>'", "'<<'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", null, "'&'", "'^'", "'|'", null, null, 
		null, "'*='", "'/='", "'+='", "'-='", "'%='", "'<<='", "'>>='", "'&='", 
		"'^='", "'|='", "'#'", "'$'", "'@'", null, null, null, null, null, "'undefined'", 
		"'noone'", "'break'", "'exit'", "'do'", "'case'", "'else'", "'new'", "'var'", 
		"'globalvar'", "'catch'", "'finally'", "'return'", "'continue'", "'for'", 
		"'switch'", "'while'", "'until'", "'repeat'", "'function'", "'with'", 
		"'default'", "'if'", "'then'", "'throw'", "'delete'", "'try'", "'enum'", 
		"'constructor'", "'static'", "'#macro'", "'\\'", "'#define'", "'#region'", 
		"'#endregion'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "OpenBracket", "ListAccessor", 
		"MapAccessor", "GridAccessor", "ArrayAccessor", "StructAccessor", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "TemplateStringEndExpression", 
		"CloseBrace", "Begin", "End", "SemiColon", "Comma", "Assign", "Colon", 
		"Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
		"Divide", "IntegerDivide", "Modulo", "Power", "QuestionMark", "NullCoalesce", 
		"NullCoalescingAssign", "RightShiftArithmetic", "LeftShiftArithmetic", 
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", 
		"NotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "Xor", "MultiplyAssign", 
		"DivideAssign", "PlusAssign", "MinusAssign", "ModulusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"NumberSign", "DollarSign", "AtSign", "BooleanLiteral", "IntegerLiteral", 
		"DecimalLiteral", "BinaryLiteral", "HexIntegerLiteral", "Undefined", "NoOne", 
		"Break", "Exit", "Do", "Case", "Else", "New", "Var", "GlobalVar", "Catch", 
		"Finally", "Return", "Continue", "For", "Switch", "While", "Until", "Repeat", 
		"Function", "With", "Default", "If", "Then", "Throw", "Delete", "Try", 
		"Enum", "Constructor", "Static", "Macro", "EscapedNewLine", "Define", 
		"Region", "EndRegion", "Identifier", "StringLiteral", "TemplateStringStart", 
		"VerbatimStringLiteral", "WhiteSpaces", "LineTerminator", "UnexpectedCharacter", 
		"RegionCharacters", "RegionEOL", "TemplateStringEnd", "TemplateStringStartExpression", 
		"TemplateStringText"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GameMakerLanguageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GameMakerLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GameMakerLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GameMakerLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GameMakerLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12751872L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 16631954663L) != 0)) {
				{
				State = 136;
				statementList();
				}
			}

			State = 139;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 141;
				statement();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 12751872L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 16631954663L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineStatementContext defineStatement() {
			return GetRuleContext<DefineStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegionStatementContext regionStatement() {
			return GetRuleContext<RegionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorDeclarationContext enumeratorDeclaration() {
			return GetRuleContext<EnumeratorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarStatementContext globalVarStatement() {
			return GetRuleContext<GlobalVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStatementContext incDecStatement() {
			return GetRuleContext<IncDecStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 146;
				block();
				}
				break;
			case 2:
				{
				State = 147;
				emptyStatement();
				}
				break;
			case 3:
				{
				State = 148;
				ifStatement();
				}
				break;
			case 4:
				{
				State = 149;
				variableDeclarationList();
				}
				break;
			case 5:
				{
				State = 150;
				iterationStatement();
				}
				break;
			case 6:
				{
				State = 151;
				continueStatement();
				}
				break;
			case 7:
				{
				State = 152;
				breakStatement();
				}
				break;
			case 8:
				{
				State = 153;
				returnStatement();
				}
				break;
			case 9:
				{
				State = 154;
				withStatement();
				}
				break;
			case 10:
				{
				State = 155;
				switchStatement();
				}
				break;
			case 11:
				{
				State = 156;
				tryStatement();
				}
				break;
			case 12:
				{
				State = 157;
				throwStatement();
				}
				break;
			case 13:
				{
				State = 158;
				exitStatement();
				}
				break;
			case 14:
				{
				State = 159;
				macroStatement();
				}
				break;
			case 15:
				{
				State = 160;
				defineStatement();
				}
				break;
			case 16:
				{
				State = 161;
				regionStatement();
				}
				break;
			case 17:
				{
				State = 162;
				enumeratorDeclaration();
				}
				break;
			case 18:
				{
				State = 163;
				globalVarStatement();
				}
				break;
			case 19:
				{
				State = 164;
				assignmentExpression();
				}
				break;
			case 20:
				{
				State = 165;
				incDecStatement();
				}
				break;
			case 21:
				{
				State = 166;
				callStatement(0);
				}
				break;
			case 22:
				{
				State = 167;
				functionDeclaration();
				}
				break;
			}
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 170;
				eos();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenBlockContext openBlock() {
			return GetRuleContext<OpenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseBlockContext closeBlock() {
			return GetRuleContext<CloseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			openBlock();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12751872L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 16631954663L) != 0)) {
				{
				State = 174;
				statementList();
				}
			}

			State = 177;
			closeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(GameMakerLanguageParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(GameMakerLanguageParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(GameMakerLanguageParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(If);
			State = 180;
			expression(0);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Then) {
				{
				State = 181;
				Match(Then);
				}
			}

			State = 184;
			statement();
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 185;
				Match(Else);
				State = 186;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(GameMakerLanguageParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(GameMakerLanguageParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(GameMakerLanguageParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(GameMakerLanguageParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(GameMakerLanguageParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(GameMakerLanguageParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(GameMakerLanguageParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public RepeatStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_iterationStatement);
		int _la;
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Do:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				Match(Do);
				State = 190;
				statement();
				State = 191;
				Match(Until);
				State = 192;
				expression(0);
				}
				break;
			case While:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(While);
				State = 195;
				expression(0);
				State = 196;
				statement();
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 198;
				Match(For);
				State = 199;
				Match(OpenParen);
				State = 202;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Var:
				case Static:
					{
					State = 200;
					variableDeclarationList();
					}
					break;
				case OpenParen:
				case New:
				case Constructor:
				case Identifier:
					{
					State = 201;
					assignmentExpression();
					}
					break;
				case SemiColon:
					break;
				default:
					break;
				}
				State = 204;
				Match(SemiColon);
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036607273976L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8250632177727L) != 0)) {
					{
					State = 205;
					expression(0);
					}
				}

				State = 208;
				Match(SemiColon);
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12751872L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 16631954663L) != 0)) {
					{
					State = 209;
					statement();
					}
				}

				State = 212;
				Match(CloseParen);
				State = 213;
				statement();
				}
				break;
			case Repeat:
				_localctx = new RepeatStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 214;
				Match(Repeat);
				State = 215;
				expression(0);
				State = 216;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(GameMakerLanguageParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(With);
			State = 221;
			expression(0);
			State = 222;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(GameMakerLanguageParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(Switch);
			State = 225;
			expression(0);
			State = 226;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(GameMakerLanguageParser.Continue, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(Continue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(GameMakerLanguageParser.Break, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(Break);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exit() { return GetToken(GameMakerLanguageParser.Exit, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(Exit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(GameMakerLanguageParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenBlockContext openBlock() {
			return GetRuleContext<OpenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseBlockContext closeBlock() {
			return GetRuleContext<CloseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			openBlock();
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 237;
				caseClauses();
				}
			}

			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 240;
				defaultClause();
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 241;
					caseClauses();
					}
				}

				}
			}

			State = 246;
			closeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 26, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 248;
				caseClause();
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(GameMakerLanguageParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_caseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(Case);
			State = 254;
			expression(0);
			State = 255;
			Match(Colon);
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12751872L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 16631954663L) != 0)) {
				{
				State = 256;
				statementList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(GameMakerLanguageParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_defaultClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(Default);
			State = 260;
			Match(Colon);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12751872L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 16631954663L) != 0)) {
				{
				State = 261;
				statementList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(GameMakerLanguageParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(Throw);
			State = 265;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(GameMakerLanguageParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(Try);
			State = 268;
			statement();
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 269;
				catchProduction();
				State = 271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 270;
					finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 273;
				finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(GameMakerLanguageParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 36, RULE_catchProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(Catch);
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 277;
				Match(OpenParen);
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Constructor || _la==Identifier) {
					{
					State = 278;
					identifier();
					}
				}

				State = 281;
				Match(CloseParen);
				}
				break;
			}
			State = 284;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(GameMakerLanguageParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 38, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(Finally);
			State = 287;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(GameMakerLanguageParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(Return);
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 290;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(GameMakerLanguageParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(Delete);
			State = 294;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueExpressionContext lValueExpression() {
			return GetRuleContext<LValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext expressionOrFunction() {
			return GetRuleContext<ExpressionOrFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			lValueExpression();
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 297;
				typeAnnotation();
				}
			}

			State = 300;
			assignmentOperator();
			State = 301;
			expressionOrFunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 46, RULE_variableDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			varModifier();
			State = 304;
			variableDeclaration();
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 305;
				Match(Comma);
				State = 306;
				variableDeclaration();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Var() { return GetTokens(GameMakerLanguageParser.Var); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var(int i) {
			return GetToken(GameMakerLanguageParser.Var, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(GameMakerLanguageParser.Static, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_varModifier);
		int _la;
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 312;
					Match(Var);
					}
					}
					State = 315;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Var );
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				Match(Static);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext expressionOrFunction() {
			return GetRuleContext<ExpressionOrFunctionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			identifier();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 321;
				typeAnnotation();
				}
			}

			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 324;
				Match(Assign);
				State = 325;
				expressionOrFunction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAnnotationContext typeAnnotation() {
		TypeAnnotationContext _localctx = new TypeAnnotationContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(Colon);
			State = 329;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalVar() { return GetToken(GameMakerLanguageParser.GlobalVar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(GameMakerLanguageParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public GlobalVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarStatementContext globalVarStatement() {
		GlobalVarStatementContext _localctx = new GlobalVarStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_globalVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(GlobalVar);
			State = 332;
			identifier();
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 333;
				Match(Comma);
				State = 334;
				identifier();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 340;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueStartExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext expressionOrFunction() {
			return GetRuleContext<ExpressionOrFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public LValueStartExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueStartExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueStartExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueStartExpressionContext lValueStartExpression() {
		LValueStartExpressionContext _localctx = new LValueStartExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_lValueStartExpression);
		try {
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Constructor:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342;
				identifier();
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				Match(OpenParen);
				State = 344;
				expressionOrFunction();
				State = 345;
				Match(CloseParen);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 3);
				{
				State = 347;
				newExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueStartExpressionContext lValueStartExpression() {
			return GetRuleContext<LValueStartExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueFinalOperatorContext lValueFinalOperator() {
			return GetRuleContext<LValueFinalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueChainOperatorContext[] lValueChainOperator() {
			return GetRuleContexts<LValueChainOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueChainOperatorContext lValueChainOperator(int i) {
			return GetRuleContext<LValueChainOperatorContext>(i);
		}
		public LValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueExpressionContext lValueExpression() {
		LValueExpressionContext _localctx = new LValueExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_lValueExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			lValueStartExpression();
			State = 358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 354;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 351;
						lValueChainOperator();
						}
						} 
					}
					State = 356;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 357;
				lValueFinalOperator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueChainOperatorContext : ParserRuleContext {
		public LValueChainOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueChainOperator; } }
	 
		public LValueChainOperatorContext() { }
		public virtual void CopyFrom(LValueChainOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberDotLValueContext : LValueChainOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(GameMakerLanguageParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberDotLValueContext(LValueChainOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotLValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallLValueContext : LValueChainOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallLValueContext(LValueChainOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallLValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexLValueContext : LValueChainOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(GameMakerLanguageParser.CloseBracket, 0); }
		public MemberIndexLValueContext(LValueChainOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexLValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueChainOperatorContext lValueChainOperator() {
		LValueChainOperatorContext _localctx = new LValueChainOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_lValueChainOperator);
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case ListAccessor:
			case MapAccessor:
			case GridAccessor:
			case ArrayAccessor:
			case StructAccessor:
				_localctx = new MemberIndexLValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 360;
				accessor();
				State = 361;
				expressionSequence();
				State = 362;
				Match(CloseBracket);
				}
				break;
			case Dot:
				_localctx = new MemberDotLValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				Match(Dot);
				State = 365;
				identifier();
				}
				break;
			case OpenParen:
				_localctx = new CallLValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 366;
				arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueFinalOperatorContext : ParserRuleContext {
		public LValueFinalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueFinalOperator; } }
	 
		public LValueFinalOperatorContext() { }
		public virtual void CopyFrom(LValueFinalOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberDotLValueFinalContext : LValueFinalOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(GameMakerLanguageParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberDotLValueFinalContext(LValueFinalOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotLValueFinal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexLValueFinalContext : LValueFinalOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(GameMakerLanguageParser.CloseBracket, 0); }
		public MemberIndexLValueFinalContext(LValueFinalOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexLValueFinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueFinalOperatorContext lValueFinalOperator() {
		LValueFinalOperatorContext _localctx = new LValueFinalOperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_lValueFinalOperator);
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case ListAccessor:
			case MapAccessor:
			case GridAccessor:
			case ArrayAccessor:
			case StructAccessor:
				_localctx = new MemberIndexLValueFinalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 369;
				accessor();
				State = 370;
				expressionSequence();
				State = 371;
				Match(CloseBracket);
				}
				break;
			case Dot:
				_localctx = new MemberDotLValueFinalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				Match(Dot);
				State = 374;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(GameMakerLanguageParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_newExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(New);
			State = 378;
			identifier();
			State = 379;
			arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 66, RULE_expressionSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			expression(0);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 382;
				Match(Comma);
				State = 383;
				expression(0);
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext expressionOrFunction() {
			return GetRuleContext<ExpressionOrFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		public ExpressionOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrFunctionContext expressionOrFunction() {
		ExpressionOrFunctionContext _localctx = new ExpressionOrFunctionContext(Context, State);
		EnterRule(_localctx, 68, RULE_expressionOrFunction);
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpenBracket:
				case OpenParen:
				case OpenBrace:
				case Begin:
				case PlusPlus:
				case MinusMinus:
				case Minus:
				case BitNot:
				case Not:
				case BooleanLiteral:
				case IntegerLiteral:
				case DecimalLiteral:
				case BinaryLiteral:
				case HexIntegerLiteral:
				case Undefined:
				case NoOne:
				case New:
				case Constructor:
				case Identifier:
				case StringLiteral:
				case TemplateStringStart:
				case VerbatimStringLiteral:
					{
					State = 389;
					expression(0);
					}
					break;
				case Function:
					{
					State = 390;
					functionDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393;
				Match(OpenParen);
				State = 394;
				expressionOrFunction();
				State = 395;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(GameMakerLanguageParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(GameMakerLanguageParser.Minus, 0); }
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(GameMakerLanguageParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(GameMakerLanguageParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(GameMakerLanguageParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(GameMakerLanguageParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(GameMakerLanguageParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(GameMakerLanguageParser.And, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(GameMakerLanguageParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BitNotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(GameMakerLanguageParser.Or, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueExpressionContext lValueExpression() {
			return GetRuleContext<LValueExpressionContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(GameMakerLanguageParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InequalityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(GameMakerLanguageParser.NotEquals, 0); }
		public InequalityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInequalityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(GameMakerLanguageParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(GameMakerLanguageParser.BitAnd, 0); }
		public BitAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalXorExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xor() { return GetToken(GameMakerLanguageParser.Xor, 0); }
		public LogicalXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(GameMakerLanguageParser.BitOr, 0); }
		public BitOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncDecExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStatementContext incDecStatement() {
			return GetRuleContext<IncDecStatementContext>(0);
		}
		public IncDecExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(GameMakerLanguageParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(GameMakerLanguageParser.BitXOr, 0); }
		public BitXOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(GameMakerLanguageParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(GameMakerLanguageParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(GameMakerLanguageParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(GameMakerLanguageParser.IntegerDivide, 0); }
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(GameMakerLanguageParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(GameMakerLanguageParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(GameMakerLanguageParser.RightShiftArithmetic, 0); }
		public BitShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				_localctx = new IncDecExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 400;
				incDecStatement();
				}
				break;
			case 2:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 401;
				lValueExpression();
				}
				break;
			case 3:
				{
				_localctx = new CallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 402;
				callStatement(0);
				}
				break;
			case 4:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 403;
				Match(Minus);
				State = 404;
				expression(19);
				}
				break;
			case 5:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 405;
				Match(BitNot);
				State = 406;
				expression(18);
				}
				break;
			case 6:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 407;
				Match(Not);
				State = 408;
				expression(17);
				}
				break;
			case 7:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 409;
				literal();
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 410;
				Match(OpenParen);
				State = 411;
				expression(0);
				State = 412;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 463;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 461;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 416;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 417;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4026531840L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 418;
						expression(17);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 419;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 420;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 421;
						expression(16);
						}
						break;
					case 3:
						{
						_localctx = new BitShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 422;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 423;
						_la = TokenStream.LA(1);
						if ( !(_la==RightShiftArithmetic || _la==LeftShiftArithmetic) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 424;
						expression(15);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 425;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 426;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 427;
						expression(14);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 428;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 429;
						_la = TokenStream.LA(1);
						if ( !(_la==Assign || _la==Equals_) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 430;
						expression(13);
						}
						break;
					case 6:
						{
						_localctx = new InequalityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 431;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 432;
						Match(NotEquals);
						State = 433;
						expression(12);
						}
						break;
					case 7:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 434;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 435;
						Match(Or);
						State = 436;
						expression(11);
						}
						break;
					case 8:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 437;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 438;
						Match(And);
						State = 439;
						expression(10);
						}
						break;
					case 9:
						{
						_localctx = new LogicalXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 440;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 441;
						Match(Xor);
						State = 442;
						expression(9);
						}
						break;
					case 10:
						{
						_localctx = new CoalesceExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 443;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 444;
						Match(NullCoalesce);
						State = 445;
						expression(8);
						}
						break;
					case 11:
						{
						_localctx = new BitAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 446;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 447;
						Match(BitAnd);
						State = 448;
						expression(7);
						}
						break;
					case 12:
						{
						_localctx = new BitOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 449;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 450;
						Match(BitOr);
						State = 451;
						expression(6);
						}
						break;
					case 13:
						{
						_localctx = new BitXOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 452;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 453;
						Match(BitXOr);
						State = 454;
						expression(5);
						}
						break;
					case 14:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 455;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 456;
						Match(QuestionMark);
						State = 457;
						expression(0);
						State = 458;
						Match(Colon);
						State = 459;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 465;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallableExpressionContext callableExpression() {
			return GetRuleContext<CallableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		return callStatement(0);
	}

	private CallStatementContext callStatement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CallStatementContext _localctx = new CallStatementContext(Context, _parentState);
		CallStatementContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_callStatement, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 467;
			callableExpression();
			State = 468;
			arguments();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 474;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CallStatementContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_callStatement);
					State = 470;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 471;
					arguments();
					}
					} 
				}
				State = 476;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueExpressionContext lValueExpression() {
			return GetRuleContext<LValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallableExpressionContext callableExpression() {
			return GetRuleContext<CallableExpressionContext>(0);
		}
		public CallableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallableExpressionContext callableExpression() {
		CallableExpressionContext _localctx = new CallableExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_callableExpression);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477;
				lValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 478;
				Match(OpenParen);
				State = 481;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Function:
					{
					State = 479;
					functionDeclaration();
					}
					break;
				case OpenParen:
				case New:
				case Constructor:
				case Identifier:
					{
					State = 480;
					callableExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 483;
				Match(CloseParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStatementContext : ParserRuleContext {
		public IncDecStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStatement; } }
	 
		public IncDecStatementContext() { }
		public virtual void CopyFrom(IncDecStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostIncDecExpressionContext : IncDecStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueExpressionContext lValueExpression() {
			return GetRuleContext<LValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(GameMakerLanguageParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(GameMakerLanguageParser.MinusMinus, 0); }
		public PostIncDecExpressionContext(IncDecStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncDecExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncDecExpressionContext : IncDecStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public LValueExpressionContext lValueExpression() {
			return GetRuleContext<LValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(GameMakerLanguageParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(GameMakerLanguageParser.MinusMinus, 0); }
		public PreIncDecExpressionContext(IncDecStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncDecExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncDecStatementContext incDecStatement() {
		IncDecStatementContext _localctx = new IncDecStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_incDecStatement);
		int _la;
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PlusPlus:
			case MinusMinus:
				_localctx = new PreIncDecExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 487;
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 488;
				lValueExpression();
				}
				break;
			case OpenParen:
			case New:
			case Constructor:
			case Identifier:
				_localctx = new PostIncDecExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 489;
				lValueExpression();
				State = 490;
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(GameMakerLanguageParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ListAccessor() { return GetToken(GameMakerLanguageParser.ListAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MapAccessor() { return GetToken(GameMakerLanguageParser.MapAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GridAccessor() { return GetToken(GameMakerLanguageParser.GridAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrayAccessor() { return GetToken(GameMakerLanguageParser.ArrayAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StructAccessor() { return GetToken(GameMakerLanguageParser.StructAccessor, 0); }
		public AccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorContext accessor() {
		AccessorContext _localctx = new AccessorContext(Context, State);
		EnterRule(_localctx, 78, RULE_accessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 504L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext[] expressionOrFunction() {
			return GetRuleContexts<ExpressionOrFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext expressionOrFunction(int i) {
			return GetRuleContext<ExpressionOrFunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 80, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			Match(OpenParen);
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036607273976L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8250640566335L) != 0)) {
				{
				State = 497;
				expressionOrFunction();
				State = 502;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 498;
						Match(Comma);
						State = 499;
						expressionOrFunction();
						}
						} 
					}
					State = 504;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 505;
					Match(Comma);
					}
				}

				}
			}

			State = 510;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(GameMakerLanguageParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(GameMakerLanguageParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(GameMakerLanguageParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(GameMakerLanguageParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(GameMakerLanguageParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(GameMakerLanguageParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(GameMakerLanguageParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(GameMakerLanguageParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(GameMakerLanguageParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(GameMakerLanguageParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalescingAssign() { return GetToken(GameMakerLanguageParser.NullCoalescingAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1151795639060267008L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Undefined() { return GetToken(GameMakerLanguageParser.Undefined, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoOne() { return GetToken(GameMakerLanguageParser.NoOne, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(GameMakerLanguageParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(GameMakerLanguageParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbatimStringLiteral() { return GetToken(GameMakerLanguageParser.VerbatimStringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(GameMakerLanguageParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryLiteral() { return GetToken(GameMakerLanguageParser.BinaryLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(GameMakerLanguageParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(GameMakerLanguageParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructLiteralContext structLiteral() {
			return GetRuleContext<StructLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 84, RULE_literal);
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Undefined:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514;
				Match(Undefined);
				}
				break;
			case NoOne:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515;
				Match(NoOne);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 516;
				Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 517;
				Match(StringLiteral);
				}
				break;
			case VerbatimStringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 518;
				Match(VerbatimStringLiteral);
				}
				break;
			case TemplateStringStart:
				EnterOuterAlt(_localctx, 6);
				{
				State = 519;
				templateStringLiteral();
				}
				break;
			case HexIntegerLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 520;
				Match(HexIntegerLiteral);
				}
				break;
			case BinaryLiteral:
				EnterOuterAlt(_localctx, 8);
				{
				State = 521;
				Match(BinaryLiteral);
				}
				break;
			case DecimalLiteral:
				EnterOuterAlt(_localctx, 9);
				{
				State = 522;
				Match(DecimalLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 10);
				{
				State = 523;
				Match(IntegerLiteral);
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 11);
				{
				State = 524;
				arrayLiteral();
				}
				break;
			case OpenBrace:
			case Begin:
				EnterOuterAlt(_localctx, 12);
				{
				State = 525;
				structLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStart() { return GetToken(GameMakerLanguageParser.TemplateStringStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringEnd() { return GetToken(GameMakerLanguageParser.TemplateStringEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(TemplateStringStart);
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringText) {
				{
				{
				State = 529;
				templateStringAtom();
				}
				}
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 535;
			Match(TemplateStringEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringText() { return GetToken(GameMakerLanguageParser.TemplateStringText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(GameMakerLanguageParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringEndExpression() { return GetToken(GameMakerLanguageParser.TemplateStringEndExpression, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 88, RULE_templateStringAtom);
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringText:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				Match(TemplateStringText);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538;
				Match(TemplateStringStartExpression);
				State = 539;
				expression(0);
				State = 540;
				Match(TemplateStringEndExpression);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(GameMakerLanguageParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(GameMakerLanguageParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(OpenBracket);
			State = 545;
			elementList();
			State = 546;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext[] expressionOrFunction() {
			return GetRuleContexts<ExpressionOrFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext expressionOrFunction(int i) {
			return GetRuleContext<ExpressionOrFunctionContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 92, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 548;
					Match(Comma);
					}
					} 
				}
				State = 553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036607273976L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8250640566335L) != 0)) {
				{
				State = 554;
				expressionOrFunction();
				}
			}

			State = 565;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 558;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 557;
						Match(Comma);
						}
						}
						State = 560;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Comma );
					State = 562;
					expressionOrFunction();
					}
					} 
				}
				State = 567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 568;
				Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenBlockContext openBlock() {
			return GetRuleContext<OpenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseBlockContext closeBlock() {
			return GetRuleContext<CloseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public StructLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructLiteralContext structLiteral() {
		StructLiteralContext _localctx = new StructLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_structLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			openBlock();
			State = 583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 17314086913L) != 0)) {
				{
				State = 572;
				propertyAssignment();
				State = 577;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 573;
						Match(Comma);
						State = 574;
						propertyAssignment();
						}
						} 
					}
					State = 579;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				}
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 580;
					Match(Comma);
					}
				}

				}
			}

			State = 585;
			closeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyIdentifierContext propertyIdentifier() {
			return GetRuleContext<PropertyIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext expressionOrFunction() {
			return GetRuleContext<ExpressionOrFunctionContext>(0);
		}
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 96, RULE_propertyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			propertyIdentifier();
			State = 588;
			Match(Colon);
			State = 589;
			expressionOrFunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SoftKeywordContext softKeyword() {
			return GetRuleContext<SoftKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertySoftKeywordContext propertySoftKeyword() {
			return GetRuleContext<PropertySoftKeywordContext>(0);
		}
		public PropertyIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyIdentifierContext propertyIdentifier() {
		PropertyIdentifierContext _localctx = new PropertyIdentifierContext(Context, State);
		EnterRule(_localctx, 98, RULE_propertyIdentifier);
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 591;
				Match(Identifier);
				}
				break;
			case Constructor:
				EnterOuterAlt(_localctx, 2);
				{
				State = 592;
				softKeyword();
				}
				break;
			case NoOne:
				EnterOuterAlt(_localctx, 3);
				{
				State = 593;
				propertySoftKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(GameMakerLanguageParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorClauseContext constructorClause() {
			return GetRuleContext<ConstructorClauseContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(Function);
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 597;
				Match(Identifier);
				}
			}

			State = 600;
			parameterList();
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon || _la==Constructor) {
				{
				State = 601;
				constructorClause();
				}
			}

			State = 604;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(GameMakerLanguageParser.Constructor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorClauseContext constructorClause() {
		ConstructorClauseContext _localctx = new ConstructorClauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_constructorClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 606;
				Match(Colon);
				State = 607;
				Match(Identifier);
				State = 608;
				parameterList();
				}
			}

			State = 611;
			Match(Constructor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterArgumentContext[] parameterArgument() {
			return GetRuleContexts<ParameterArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterArgumentContext parameterArgument(int i) {
			return GetRuleContext<ParameterArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			Match(OpenParen);
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Constructor || _la==Identifier) {
				{
				State = 614;
				parameterArgument();
				State = 619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 615;
						Match(Comma);
						State = 616;
						parameterArgument();
						}
						} 
					}
					State = 621;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 622;
					Match(Comma);
					}
				}

				}
			}

			State = 627;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrFunctionContext expressionOrFunction() {
			return GetRuleContext<ExpressionOrFunctionContext>(0);
		}
		public ParameterArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterArgumentContext parameterArgument() {
		ParameterArgumentContext _localctx = new ParameterArgumentContext(Context, State);
		EnterRule(_localctx, 106, RULE_parameterArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			identifier();
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 630;
				Match(Assign);
				State = 631;
				expressionOrFunction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SoftKeywordContext softKeyword() {
			return GetRuleContext<SoftKeywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 108, RULE_identifier);
		try {
			State = 636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634;
				Match(Identifier);
				}
				break;
			case Constructor:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				softKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(GameMakerLanguageParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenBlockContext openBlock() {
			return GetRuleContext<OpenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseBlockContext closeBlock() {
			return GetRuleContext<CloseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public EnumeratorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorDeclarationContext enumeratorDeclaration() {
		EnumeratorDeclarationContext _localctx = new EnumeratorDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_enumeratorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(Enum);
			State = 639;
			identifier();
			State = 640;
			openBlock();
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Constructor || _la==Identifier) {
				{
				State = 641;
				enumeratorList();
				}
			}

			State = 644;
			closeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GameMakerLanguageParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GameMakerLanguageParser.Comma, i);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, State);
		EnterRule(_localctx, 112, RULE_enumeratorList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			enumerator();
			State = 651;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 647;
					Match(Comma);
					State = 648;
					enumerator();
					}
					} 
				}
				State = 653;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 654;
				Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(GameMakerLanguageParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(GameMakerLanguageParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryLiteral() { return GetToken(GameMakerLanguageParser.BinaryLiteral, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 114, RULE_enumerator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			identifier();
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 658;
				Match(Assign);
				State = 659;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 13L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Macro() { return GetToken(GameMakerLanguageParser.Macro, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(GameMakerLanguageParser.LineTerminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GameMakerLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroTokenContext[] macroToken() {
			return GetRuleContexts<MacroTokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroTokenContext macroToken(int i) {
			return GetRuleContext<MacroTokenContext>(i);
		}
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_macroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			Match(Macro);
			State = 663;
			identifier();
			State = 665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 664;
				macroToken();
				}
				}
				State = 667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -8L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1978622713790463L) != 0) );
			State = 669;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==LineTerminator) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Define() { return GetToken(GameMakerLanguageParser.Define, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegionCharacters() { return GetToken(GameMakerLanguageParser.RegionCharacters, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegionEOL() { return GetToken(GameMakerLanguageParser.RegionEOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GameMakerLanguageParser.Eof, 0); }
		public DefineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineStatementContext defineStatement() {
		DefineStatementContext _localctx = new DefineStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_defineStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(Define);
			State = 672;
			Match(RegionCharacters);
			State = 673;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==RegionEOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Region() { return GetToken(GameMakerLanguageParser.Region, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndRegion() { return GetToken(GameMakerLanguageParser.EndRegion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegionEOL() { return GetToken(GameMakerLanguageParser.RegionEOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GameMakerLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegionCharacters() { return GetToken(GameMakerLanguageParser.RegionCharacters, 0); }
		public RegionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegionStatementContext regionStatement() {
		RegionStatementContext _localctx = new RegionStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_regionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			_la = TokenStream.LA(1);
			if ( !(_la==Region || _la==EndRegion) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RegionCharacters) {
				{
				State = 676;
				Match(RegionCharacters);
				}
			}

			State = 679;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==RegionEOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStatementContext identifierStatement() {
		IdentifierStatementContext _localctx = new IdentifierStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_identifierStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoftKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(GameMakerLanguageParser.Constructor, 0); }
		public SoftKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_softKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoftKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoftKeywordContext softKeyword() {
		SoftKeywordContext _localctx = new SoftKeywordContext(Context, State);
		EnterRule(_localctx, 124, RULE_softKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(Constructor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySoftKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoOne() { return GetToken(GameMakerLanguageParser.NoOne, 0); }
		public PropertySoftKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySoftKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySoftKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySoftKeywordContext propertySoftKeyword() {
		PropertySoftKeywordContext _localctx = new PropertySoftKeywordContext(Context, State);
		EnterRule(_localctx, 126, RULE_propertySoftKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(NoOne);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(GameMakerLanguageParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(GameMakerLanguageParser.Begin, 0); }
		public OpenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenBlockContext openBlock() {
		OpenBlockContext _localctx = new OpenBlockContext(Context, State);
		EnterRule(_localctx, 128, RULE_openBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			_la = TokenStream.LA(1);
			if ( !(_la==OpenBrace || _la==Begin) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(GameMakerLanguageParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(GameMakerLanguageParser.End, 0); }
		public CloseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseBlockContext closeBlock() {
		CloseBlockContext _localctx = new CloseBlockContext(Context, State);
		EnterRule(_localctx, 130, RULE_closeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			_la = TokenStream.LA(1);
			if ( !(_la==CloseBrace || _la==End) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(GameMakerLanguageParser.SemiColon, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 132, RULE_eos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapedNewLine() { return GetToken(GameMakerLanguageParser.EscapedNewLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(GameMakerLanguageParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(GameMakerLanguageParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(GameMakerLanguageParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(GameMakerLanguageParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(GameMakerLanguageParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(GameMakerLanguageParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(GameMakerLanguageParser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(GameMakerLanguageParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(GameMakerLanguageParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(GameMakerLanguageParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GameMakerLanguageParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GameMakerLanguageParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(GameMakerLanguageParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(GameMakerLanguageParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(GameMakerLanguageParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(GameMakerLanguageParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(GameMakerLanguageParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(GameMakerLanguageParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(GameMakerLanguageParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(GameMakerLanguageParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(GameMakerLanguageParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerDivide() { return GetToken(GameMakerLanguageParser.IntegerDivide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(GameMakerLanguageParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(GameMakerLanguageParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(GameMakerLanguageParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(GameMakerLanguageParser.NullCoalesce, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalescingAssign() { return GetToken(GameMakerLanguageParser.NullCoalescingAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(GameMakerLanguageParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(GameMakerLanguageParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(GameMakerLanguageParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(GameMakerLanguageParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(GameMakerLanguageParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(GameMakerLanguageParser.GreaterThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(GameMakerLanguageParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(GameMakerLanguageParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(GameMakerLanguageParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(GameMakerLanguageParser.BitXOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(GameMakerLanguageParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(GameMakerLanguageParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(GameMakerLanguageParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xor() { return GetToken(GameMakerLanguageParser.Xor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(GameMakerLanguageParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(GameMakerLanguageParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(GameMakerLanguageParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(GameMakerLanguageParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(GameMakerLanguageParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(GameMakerLanguageParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(GameMakerLanguageParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(GameMakerLanguageParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(GameMakerLanguageParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(GameMakerLanguageParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberSign() { return GetToken(GameMakerLanguageParser.NumberSign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DollarSign() { return GetToken(GameMakerLanguageParser.DollarSign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AtSign() { return GetToken(GameMakerLanguageParser.AtSign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Undefined() { return GetToken(GameMakerLanguageParser.Undefined, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoOne() { return GetToken(GameMakerLanguageParser.NoOne, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(GameMakerLanguageParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(GameMakerLanguageParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(GameMakerLanguageParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryLiteral() { return GetToken(GameMakerLanguageParser.BinaryLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(GameMakerLanguageParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(GameMakerLanguageParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exit() { return GetToken(GameMakerLanguageParser.Exit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(GameMakerLanguageParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(GameMakerLanguageParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(GameMakerLanguageParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(GameMakerLanguageParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(GameMakerLanguageParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalVar() { return GetToken(GameMakerLanguageParser.GlobalVar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(GameMakerLanguageParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(GameMakerLanguageParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(GameMakerLanguageParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(GameMakerLanguageParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(GameMakerLanguageParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(GameMakerLanguageParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(GameMakerLanguageParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(GameMakerLanguageParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(GameMakerLanguageParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(GameMakerLanguageParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(GameMakerLanguageParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(GameMakerLanguageParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(GameMakerLanguageParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(GameMakerLanguageParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(GameMakerLanguageParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(GameMakerLanguageParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(GameMakerLanguageParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(GameMakerLanguageParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(GameMakerLanguageParser.Constructor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(GameMakerLanguageParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GameMakerLanguageParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(GameMakerLanguageParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbatimStringLiteral() { return GetToken(GameMakerLanguageParser.VerbatimStringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStart() { return GetToken(GameMakerLanguageParser.TemplateStringStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringEnd() { return GetToken(GameMakerLanguageParser.TemplateStringEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringText() { return GetToken(GameMakerLanguageParser.TemplateStringText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(GameMakerLanguageParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringEndExpression() { return GetToken(GameMakerLanguageParser.TemplateStringEndExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ListAccessor() { return GetToken(GameMakerLanguageParser.ListAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MapAccessor() { return GetToken(GameMakerLanguageParser.MapAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GridAccessor() { return GetToken(GameMakerLanguageParser.GridAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrayAccessor() { return GetToken(GameMakerLanguageParser.ArrayAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StructAccessor() { return GetToken(GameMakerLanguageParser.StructAccessor, 0); }
		public MacroTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGameMakerLanguageParserVisitor<TResult> typedVisitor = visitor as IGameMakerLanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroTokenContext macroToken() {
		MacroTokenContext _localctx = new MacroTokenContext(Context, State);
		EnterRule(_localctx, 134, RULE_macroToken);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -8L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1978622713790463L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 35: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 36: return callStatement_sempred((CallStatementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 16);
		case 1: return Precpred(Context, 15);
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		}
		return true;
	}
	private bool callStatement_sempred(CallStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,114,696,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,3,0,138,8,0,1,0,1,0,1,1,4,
		1,143,8,1,11,1,12,1,144,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,169,8,2,1,2,3,2,172,8,2,
		1,3,1,3,3,3,176,8,3,1,3,1,3,1,4,1,4,1,4,3,4,183,8,4,1,4,1,4,1,4,3,4,188,
		8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,203,8,5,1,
		5,1,5,3,5,207,8,5,1,5,1,5,3,5,211,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,219,
		8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,3,12,239,8,12,1,12,1,12,3,12,243,8,12,3,12,245,8,12,1,12,1,12,
		1,13,4,13,250,8,13,11,13,12,13,251,1,14,1,14,1,14,1,14,3,14,258,8,14,1,
		15,1,15,1,15,3,15,263,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,272,
		8,17,1,17,3,17,275,8,17,1,18,1,18,1,18,3,18,280,8,18,1,18,3,18,283,8,18,
		1,18,1,18,1,19,1,19,1,19,1,20,1,20,3,20,292,8,20,1,21,1,21,1,21,1,22,1,
		22,3,22,299,8,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,5,23,308,8,23,10,23,
		12,23,311,9,23,1,24,4,24,314,8,24,11,24,12,24,315,1,24,3,24,319,8,24,1,
		25,1,25,3,25,323,8,25,1,25,1,25,3,25,327,8,25,1,26,1,26,1,26,1,27,1,27,
		1,27,1,27,5,27,336,8,27,10,27,12,27,339,9,27,1,27,1,27,1,28,1,28,1,28,
		1,28,1,28,1,28,3,28,349,8,28,1,29,1,29,5,29,353,8,29,10,29,12,29,356,9,
		29,1,29,3,29,359,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,368,8,30,
		1,31,1,31,1,31,1,31,1,31,1,31,3,31,376,8,31,1,32,1,32,1,32,1,32,1,33,1,
		33,1,33,5,33,385,8,33,10,33,12,33,388,9,33,1,34,1,34,3,34,392,8,34,1,34,
		1,34,1,34,1,34,3,34,398,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,415,8,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,462,8,
		35,10,35,12,35,465,9,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,473,8,36,10,
		36,12,36,476,9,36,1,37,1,37,1,37,1,37,3,37,482,8,37,1,37,1,37,3,37,486,
		8,37,1,38,1,38,1,38,1,38,1,38,3,38,493,8,38,1,39,1,39,1,40,1,40,1,40,1,
		40,5,40,501,8,40,10,40,12,40,504,9,40,1,40,3,40,507,8,40,3,40,509,8,40,
		1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,3,42,527,8,42,1,43,1,43,5,43,531,8,43,10,43,12,43,534,9,43,1,
		43,1,43,1,44,1,44,1,44,1,44,1,44,3,44,543,8,44,1,45,1,45,1,45,1,45,1,46,
		5,46,550,8,46,10,46,12,46,553,9,46,1,46,3,46,556,8,46,1,46,4,46,559,8,
		46,11,46,12,46,560,1,46,5,46,564,8,46,10,46,12,46,567,9,46,1,46,3,46,570,
		8,46,1,47,1,47,1,47,1,47,5,47,576,8,47,10,47,12,47,579,9,47,1,47,3,47,
		582,8,47,3,47,584,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,3,
		49,595,8,49,1,50,1,50,3,50,599,8,50,1,50,1,50,3,50,603,8,50,1,50,1,50,
		1,51,1,51,1,51,3,51,610,8,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,618,8,
		52,10,52,12,52,621,9,52,1,52,3,52,624,8,52,3,52,626,8,52,1,52,1,52,1,53,
		1,53,1,53,3,53,633,8,53,1,54,1,54,3,54,637,8,54,1,55,1,55,1,55,1,55,3,
		55,643,8,55,1,55,1,55,1,56,1,56,1,56,5,56,650,8,56,10,56,12,56,653,9,56,
		1,56,3,56,656,8,56,1,57,1,57,1,57,3,57,661,8,57,1,58,1,58,1,58,4,58,666,
		8,58,11,58,12,58,667,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,3,60,678,
		8,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,
		1,66,1,67,1,67,1,67,0,2,70,72,68,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
		118,120,122,124,126,128,130,132,134,0,15,1,0,28,31,1,0,24,25,1,0,36,37,
		1,0,38,41,2,0,19,19,42,42,1,0,22,23,1,0,3,8,3,0,19,19,35,35,50,59,2,0,
		64,64,66,67,1,1,108,108,1,1,111,111,1,0,101,102,2,0,12,12,15,15,2,0,14,
		14,16,16,4,0,3,97,99,99,103,106,112,114,754,0,137,1,0,0,0,2,142,1,0,0,
		0,4,168,1,0,0,0,6,173,1,0,0,0,8,179,1,0,0,0,10,218,1,0,0,0,12,220,1,0,
		0,0,14,224,1,0,0,0,16,228,1,0,0,0,18,230,1,0,0,0,20,232,1,0,0,0,22,234,
		1,0,0,0,24,236,1,0,0,0,26,249,1,0,0,0,28,253,1,0,0,0,30,259,1,0,0,0,32,
		264,1,0,0,0,34,267,1,0,0,0,36,276,1,0,0,0,38,286,1,0,0,0,40,289,1,0,0,
		0,42,293,1,0,0,0,44,296,1,0,0,0,46,303,1,0,0,0,48,318,1,0,0,0,50,320,1,
		0,0,0,52,328,1,0,0,0,54,331,1,0,0,0,56,348,1,0,0,0,58,350,1,0,0,0,60,367,
		1,0,0,0,62,375,1,0,0,0,64,377,1,0,0,0,66,381,1,0,0,0,68,397,1,0,0,0,70,
		414,1,0,0,0,72,466,1,0,0,0,74,485,1,0,0,0,76,492,1,0,0,0,78,494,1,0,0,
		0,80,496,1,0,0,0,82,512,1,0,0,0,84,526,1,0,0,0,86,528,1,0,0,0,88,542,1,
		0,0,0,90,544,1,0,0,0,92,551,1,0,0,0,94,571,1,0,0,0,96,587,1,0,0,0,98,594,
		1,0,0,0,100,596,1,0,0,0,102,609,1,0,0,0,104,613,1,0,0,0,106,629,1,0,0,
		0,108,636,1,0,0,0,110,638,1,0,0,0,112,646,1,0,0,0,114,657,1,0,0,0,116,
		662,1,0,0,0,118,671,1,0,0,0,120,675,1,0,0,0,122,681,1,0,0,0,124,683,1,
		0,0,0,126,685,1,0,0,0,128,687,1,0,0,0,130,689,1,0,0,0,132,691,1,0,0,0,
		134,693,1,0,0,0,136,138,3,2,1,0,137,136,1,0,0,0,137,138,1,0,0,0,138,139,
		1,0,0,0,139,140,5,0,0,1,140,1,1,0,0,0,141,143,3,4,2,0,142,141,1,0,0,0,
		143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,3,1,0,0,0,146,169,
		3,6,3,0,147,169,3,22,11,0,148,169,3,8,4,0,149,169,3,46,23,0,150,169,3,
		10,5,0,151,169,3,16,8,0,152,169,3,18,9,0,153,169,3,40,20,0,154,169,3,12,
		6,0,155,169,3,14,7,0,156,169,3,34,17,0,157,169,3,32,16,0,158,169,3,20,
		10,0,159,169,3,116,58,0,160,169,3,118,59,0,161,169,3,120,60,0,162,169,
		3,110,55,0,163,169,3,54,27,0,164,169,3,44,22,0,165,169,3,76,38,0,166,169,
		3,72,36,0,167,169,3,100,50,0,168,146,1,0,0,0,168,147,1,0,0,0,168,148,1,
		0,0,0,168,149,1,0,0,0,168,150,1,0,0,0,168,151,1,0,0,0,168,152,1,0,0,0,
		168,153,1,0,0,0,168,154,1,0,0,0,168,155,1,0,0,0,168,156,1,0,0,0,168,157,
		1,0,0,0,168,158,1,0,0,0,168,159,1,0,0,0,168,160,1,0,0,0,168,161,1,0,0,
		0,168,162,1,0,0,0,168,163,1,0,0,0,168,164,1,0,0,0,168,165,1,0,0,0,168,
		166,1,0,0,0,168,167,1,0,0,0,169,171,1,0,0,0,170,172,3,132,66,0,171,170,
		1,0,0,0,171,172,1,0,0,0,172,5,1,0,0,0,173,175,3,128,64,0,174,176,3,2,1,
		0,175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,3,130,65,0,178,
		7,1,0,0,0,179,180,5,90,0,0,180,182,3,70,35,0,181,183,5,91,0,0,182,181,
		1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,187,3,4,2,0,185,186,5,74,0,
		0,186,188,3,4,2,0,187,185,1,0,0,0,187,188,1,0,0,0,188,9,1,0,0,0,189,190,
		5,72,0,0,190,191,3,4,2,0,191,192,5,85,0,0,192,193,3,70,35,0,193,219,1,
		0,0,0,194,195,5,84,0,0,195,196,3,70,35,0,196,197,3,4,2,0,197,219,1,0,0,
		0,198,199,5,82,0,0,199,202,5,10,0,0,200,203,3,46,23,0,201,203,3,44,22,
		0,202,200,1,0,0,0,202,201,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,
		206,5,17,0,0,205,207,3,70,35,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,
		1,0,0,0,208,210,5,17,0,0,209,211,3,4,2,0,210,209,1,0,0,0,210,211,1,0,0,
		0,211,212,1,0,0,0,212,213,5,11,0,0,213,219,3,4,2,0,214,215,5,86,0,0,215,
		216,3,70,35,0,216,217,3,4,2,0,217,219,1,0,0,0,218,189,1,0,0,0,218,194,
		1,0,0,0,218,198,1,0,0,0,218,214,1,0,0,0,219,11,1,0,0,0,220,221,5,88,0,
		0,221,222,3,70,35,0,222,223,3,4,2,0,223,13,1,0,0,0,224,225,5,83,0,0,225,
		226,3,70,35,0,226,227,3,24,12,0,227,15,1,0,0,0,228,229,5,81,0,0,229,17,
		1,0,0,0,230,231,5,70,0,0,231,19,1,0,0,0,232,233,5,71,0,0,233,21,1,0,0,
		0,234,235,5,17,0,0,235,23,1,0,0,0,236,238,3,128,64,0,237,239,3,26,13,0,
		238,237,1,0,0,0,238,239,1,0,0,0,239,244,1,0,0,0,240,242,3,30,15,0,241,
		243,3,26,13,0,242,241,1,0,0,0,242,243,1,0,0,0,243,245,1,0,0,0,244,240,
		1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,3,130,65,0,247,25,1,0,
		0,0,248,250,3,28,14,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,
		251,252,1,0,0,0,252,27,1,0,0,0,253,254,5,73,0,0,254,255,3,70,35,0,255,
		257,5,20,0,0,256,258,3,2,1,0,257,256,1,0,0,0,257,258,1,0,0,0,258,29,1,
		0,0,0,259,260,5,89,0,0,260,262,5,20,0,0,261,263,3,2,1,0,262,261,1,0,0,
		0,262,263,1,0,0,0,263,31,1,0,0,0,264,265,5,92,0,0,265,266,3,70,35,0,266,
		33,1,0,0,0,267,268,5,94,0,0,268,274,3,4,2,0,269,271,3,36,18,0,270,272,
		3,38,19,0,271,270,1,0,0,0,271,272,1,0,0,0,272,275,1,0,0,0,273,275,3,38,
		19,0,274,269,1,0,0,0,274,273,1,0,0,0,275,35,1,0,0,0,276,282,5,78,0,0,277,
		279,5,10,0,0,278,280,3,108,54,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,
		1,0,0,0,281,283,5,11,0,0,282,277,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,
		0,284,285,3,4,2,0,285,37,1,0,0,0,286,287,5,79,0,0,287,288,3,4,2,0,288,
		39,1,0,0,0,289,291,5,80,0,0,290,292,3,70,35,0,291,290,1,0,0,0,291,292,
		1,0,0,0,292,41,1,0,0,0,293,294,5,93,0,0,294,295,3,70,35,0,295,43,1,0,0,
		0,296,298,3,58,29,0,297,299,3,52,26,0,298,297,1,0,0,0,298,299,1,0,0,0,
		299,300,1,0,0,0,300,301,3,82,41,0,301,302,3,68,34,0,302,45,1,0,0,0,303,
		304,3,48,24,0,304,309,3,50,25,0,305,306,5,18,0,0,306,308,3,50,25,0,307,
		305,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,47,1,0,
		0,0,311,309,1,0,0,0,312,314,5,76,0,0,313,312,1,0,0,0,314,315,1,0,0,0,315,
		313,1,0,0,0,315,316,1,0,0,0,316,319,1,0,0,0,317,319,5,97,0,0,318,313,1,
		0,0,0,318,317,1,0,0,0,319,49,1,0,0,0,320,322,3,108,54,0,321,323,3,52,26,
		0,322,321,1,0,0,0,322,323,1,0,0,0,323,326,1,0,0,0,324,325,5,19,0,0,325,
		327,3,68,34,0,326,324,1,0,0,0,326,327,1,0,0,0,327,51,1,0,0,0,328,329,5,
		20,0,0,329,330,3,108,54,0,330,53,1,0,0,0,331,332,5,77,0,0,332,337,3,108,
		54,0,333,334,5,18,0,0,334,336,3,108,54,0,335,333,1,0,0,0,336,339,1,0,0,
		0,337,335,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,337,1,0,0,0,340,
		341,5,17,0,0,341,55,1,0,0,0,342,349,3,108,54,0,343,344,5,10,0,0,344,345,
		3,68,34,0,345,346,5,11,0,0,346,349,1,0,0,0,347,349,3,64,32,0,348,342,1,
		0,0,0,348,343,1,0,0,0,348,347,1,0,0,0,349,57,1,0,0,0,350,358,3,56,28,0,
		351,353,3,60,30,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,
		355,1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,359,3,62,31,0,358,354,
		1,0,0,0,358,359,1,0,0,0,359,59,1,0,0,0,360,361,3,78,39,0,361,362,3,66,
		33,0,362,363,5,9,0,0,363,368,1,0,0,0,364,365,5,21,0,0,365,368,3,108,54,
		0,366,368,3,80,40,0,367,360,1,0,0,0,367,364,1,0,0,0,367,366,1,0,0,0,368,
		61,1,0,0,0,369,370,3,78,39,0,370,371,3,66,33,0,371,372,5,9,0,0,372,376,
		1,0,0,0,373,374,5,21,0,0,374,376,3,108,54,0,375,369,1,0,0,0,375,373,1,
		0,0,0,376,63,1,0,0,0,377,378,5,75,0,0,378,379,3,108,54,0,379,380,3,80,
		40,0,380,65,1,0,0,0,381,386,3,70,35,0,382,383,5,18,0,0,383,385,3,70,35,
		0,384,382,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,
		67,1,0,0,0,388,386,1,0,0,0,389,392,3,70,35,0,390,392,3,100,50,0,391,389,
		1,0,0,0,391,390,1,0,0,0,392,398,1,0,0,0,393,394,5,10,0,0,394,395,3,68,
		34,0,395,396,5,11,0,0,396,398,1,0,0,0,397,391,1,0,0,0,397,393,1,0,0,0,
		398,69,1,0,0,0,399,400,6,35,-1,0,400,415,3,76,38,0,401,415,3,58,29,0,402,
		415,3,72,36,0,403,404,5,25,0,0,404,415,3,70,35,19,405,406,5,26,0,0,406,
		415,3,70,35,18,407,408,5,27,0,0,408,415,3,70,35,17,409,415,3,84,42,0,410,
		411,5,10,0,0,411,412,3,70,35,0,412,413,5,11,0,0,413,415,1,0,0,0,414,399,
		1,0,0,0,414,401,1,0,0,0,414,402,1,0,0,0,414,403,1,0,0,0,414,405,1,0,0,
		0,414,407,1,0,0,0,414,409,1,0,0,0,414,410,1,0,0,0,415,463,1,0,0,0,416,
		417,10,16,0,0,417,418,7,0,0,0,418,462,3,70,35,17,419,420,10,15,0,0,420,
		421,7,1,0,0,421,462,3,70,35,16,422,423,10,14,0,0,423,424,7,2,0,0,424,462,
		3,70,35,15,425,426,10,13,0,0,426,427,7,3,0,0,427,462,3,70,35,14,428,429,
		10,12,0,0,429,430,7,4,0,0,430,462,3,70,35,13,431,432,10,11,0,0,432,433,
		5,43,0,0,433,462,3,70,35,12,434,435,10,10,0,0,435,436,5,48,0,0,436,462,
		3,70,35,11,437,438,10,9,0,0,438,439,5,47,0,0,439,462,3,70,35,10,440,441,
		10,8,0,0,441,442,5,49,0,0,442,462,3,70,35,9,443,444,10,7,0,0,444,445,5,
		34,0,0,445,462,3,70,35,8,446,447,10,6,0,0,447,448,5,44,0,0,448,462,3,70,
		35,7,449,450,10,5,0,0,450,451,5,46,0,0,451,462,3,70,35,6,452,453,10,4,
		0,0,453,454,5,45,0,0,454,462,3,70,35,5,455,456,10,3,0,0,456,457,5,33,0,
		0,457,458,3,70,35,0,458,459,5,20,0,0,459,460,3,70,35,3,460,462,1,0,0,0,
		461,416,1,0,0,0,461,419,1,0,0,0,461,422,1,0,0,0,461,425,1,0,0,0,461,428,
		1,0,0,0,461,431,1,0,0,0,461,434,1,0,0,0,461,437,1,0,0,0,461,440,1,0,0,
		0,461,443,1,0,0,0,461,446,1,0,0,0,461,449,1,0,0,0,461,452,1,0,0,0,461,
		455,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,71,1,0,
		0,0,465,463,1,0,0,0,466,467,6,36,-1,0,467,468,3,74,37,0,468,469,3,80,40,
		0,469,474,1,0,0,0,470,471,10,1,0,0,471,473,3,80,40,0,472,470,1,0,0,0,473,
		476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,73,1,0,0,0,476,474,1,0,
		0,0,477,486,3,58,29,0,478,481,5,10,0,0,479,482,3,100,50,0,480,482,3,74,
		37,0,481,479,1,0,0,0,481,480,1,0,0,0,482,483,1,0,0,0,483,484,5,11,0,0,
		484,486,1,0,0,0,485,477,1,0,0,0,485,478,1,0,0,0,486,75,1,0,0,0,487,488,
		7,5,0,0,488,493,3,58,29,0,489,490,3,58,29,0,490,491,7,5,0,0,491,493,1,
		0,0,0,492,487,1,0,0,0,492,489,1,0,0,0,493,77,1,0,0,0,494,495,7,6,0,0,495,
		79,1,0,0,0,496,508,5,10,0,0,497,502,3,68,34,0,498,499,5,18,0,0,499,501,
		3,68,34,0,500,498,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,
		0,0,503,506,1,0,0,0,504,502,1,0,0,0,505,507,5,18,0,0,506,505,1,0,0,0,506,
		507,1,0,0,0,507,509,1,0,0,0,508,497,1,0,0,0,508,509,1,0,0,0,509,510,1,
		0,0,0,510,511,5,11,0,0,511,81,1,0,0,0,512,513,7,7,0,0,513,83,1,0,0,0,514,
		527,5,68,0,0,515,527,5,69,0,0,516,527,5,63,0,0,517,527,5,104,0,0,518,527,
		5,106,0,0,519,527,3,86,43,0,520,527,5,67,0,0,521,527,5,66,0,0,522,527,
		5,65,0,0,523,527,5,64,0,0,524,527,3,90,45,0,525,527,3,94,47,0,526,514,
		1,0,0,0,526,515,1,0,0,0,526,516,1,0,0,0,526,517,1,0,0,0,526,518,1,0,0,
		0,526,519,1,0,0,0,526,520,1,0,0,0,526,521,1,0,0,0,526,522,1,0,0,0,526,
		523,1,0,0,0,526,524,1,0,0,0,526,525,1,0,0,0,527,85,1,0,0,0,528,532,5,105,
		0,0,529,531,3,88,44,0,530,529,1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,
		532,533,1,0,0,0,533,535,1,0,0,0,534,532,1,0,0,0,535,536,5,112,0,0,536,
		87,1,0,0,0,537,543,5,114,0,0,538,539,5,113,0,0,539,540,3,70,35,0,540,541,
		5,13,0,0,541,543,1,0,0,0,542,537,1,0,0,0,542,538,1,0,0,0,543,89,1,0,0,
		0,544,545,5,3,0,0,545,546,3,92,46,0,546,547,5,9,0,0,547,91,1,0,0,0,548,
		550,5,18,0,0,549,548,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,
		0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,554,556,3,68,34,0,555,554,1,0,0,
		0,555,556,1,0,0,0,556,565,1,0,0,0,557,559,5,18,0,0,558,557,1,0,0,0,559,
		560,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,564,3,
		68,34,0,563,558,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,
		0,566,569,1,0,0,0,567,565,1,0,0,0,568,570,5,18,0,0,569,568,1,0,0,0,569,
		570,1,0,0,0,570,93,1,0,0,0,571,583,3,128,64,0,572,577,3,96,48,0,573,574,
		5,18,0,0,574,576,3,96,48,0,575,573,1,0,0,0,576,579,1,0,0,0,577,575,1,0,
		0,0,577,578,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,580,582,5,18,0,0,581,
		580,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,572,1,0,0,0,583,584,1,
		0,0,0,584,585,1,0,0,0,585,586,3,130,65,0,586,95,1,0,0,0,587,588,3,98,49,
		0,588,589,5,20,0,0,589,590,3,68,34,0,590,97,1,0,0,0,591,595,5,103,0,0,
		592,595,3,124,62,0,593,595,3,126,63,0,594,591,1,0,0,0,594,592,1,0,0,0,
		594,593,1,0,0,0,595,99,1,0,0,0,596,598,5,87,0,0,597,599,5,103,0,0,598,
		597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,3,104,52,0,601,603,
		3,102,51,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,3,6,
		3,0,605,101,1,0,0,0,606,607,5,20,0,0,607,608,5,103,0,0,608,610,3,104,52,
		0,609,606,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,612,5,96,0,0,612,
		103,1,0,0,0,613,625,5,10,0,0,614,619,3,106,53,0,615,616,5,18,0,0,616,618,
		3,106,53,0,617,615,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,
		0,0,620,623,1,0,0,0,621,619,1,0,0,0,622,624,5,18,0,0,623,622,1,0,0,0,623,
		624,1,0,0,0,624,626,1,0,0,0,625,614,1,0,0,0,625,626,1,0,0,0,626,627,1,
		0,0,0,627,628,5,11,0,0,628,105,1,0,0,0,629,632,3,108,54,0,630,631,5,19,
		0,0,631,633,3,68,34,0,632,630,1,0,0,0,632,633,1,0,0,0,633,107,1,0,0,0,
		634,637,5,103,0,0,635,637,3,124,62,0,636,634,1,0,0,0,636,635,1,0,0,0,637,
		109,1,0,0,0,638,639,5,95,0,0,639,640,3,108,54,0,640,642,3,128,64,0,641,
		643,3,112,56,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,645,
		3,130,65,0,645,111,1,0,0,0,646,651,3,114,57,0,647,648,5,18,0,0,648,650,
		3,114,57,0,649,647,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,
		0,0,652,655,1,0,0,0,653,651,1,0,0,0,654,656,5,18,0,0,655,654,1,0,0,0,655,
		656,1,0,0,0,656,113,1,0,0,0,657,660,3,108,54,0,658,659,5,19,0,0,659,661,
		7,8,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,115,1,0,0,0,662,663,5,98,0,
		0,663,665,3,108,54,0,664,666,3,134,67,0,665,664,1,0,0,0,666,667,1,0,0,
		0,667,665,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,670,7,9,0,0,670,
		117,1,0,0,0,671,672,5,100,0,0,672,673,5,110,0,0,673,674,7,10,0,0,674,119,
		1,0,0,0,675,677,7,11,0,0,676,678,5,110,0,0,677,676,1,0,0,0,677,678,1,0,
		0,0,678,679,1,0,0,0,679,680,7,10,0,0,680,121,1,0,0,0,681,682,3,108,54,
		0,682,123,1,0,0,0,683,684,5,96,0,0,684,125,1,0,0,0,685,686,5,69,0,0,686,
		127,1,0,0,0,687,688,7,12,0,0,688,129,1,0,0,0,689,690,7,13,0,0,690,131,
		1,0,0,0,691,692,5,17,0,0,692,133,1,0,0,0,693,694,7,14,0,0,694,135,1,0,
		0,0,73,137,144,168,171,175,182,187,202,206,210,218,238,242,244,251,257,
		262,271,274,279,282,291,298,309,315,318,322,326,337,348,354,358,367,375,
		386,391,397,414,461,463,474,481,485,492,502,506,508,526,532,542,551,555,
		560,565,569,577,581,583,594,598,602,609,619,623,625,632,636,642,651,655,
		660,667,677
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
